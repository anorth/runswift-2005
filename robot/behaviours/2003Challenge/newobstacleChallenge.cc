/*

   Copyright 2003 The University of New South Wales (UNSW) and National  
   ICT Australia (NICTA).

   This file is part of the 2003 team rUNSWift RoboCup entry.  You may  
   redistribute it and/or modify it under the terms of the GNU General  
   Public License as published by the Free Software Foundation; either  
   version 2 of the License, or (at your option) any later version as  
   modified below.  As the original licensors, we add the following  
   conditions to that license:

   In paragraph 2.b), the phrase "distribute or publish" should be  
   interpreted to include entry into a competition, and hence the source  
   of any derived work entered into a competition must be made available  
   to all parties involved in that competition under the terms of this  
   license.

   In addition, if the authors of a derived work publish any conference  
   proceedings, journal articles or other academic papers describing that  
   derived work, then appropriate academic citations to the original work  
   must be included in that publication.

   This rUNSWift source is distributed in the hope that it will be useful,  
   but WITHOUT ANY WARRANTY; without even the implied warranty of  
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  
   General Public License for more details.

   You should have received a copy of the GNU General Public License along  
   with this source code; if not, write to the Free Software Foundation,  
   Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*/

/*
 * Last modification background information
 * $Id: newobstacleChallenge.cc 1953 2003-08-21 03:51:39Z eileenm $
 *
 * Copyright (c) 2003 UNSW
 * All Rights Reserved.
 * 
 **/

#include "newobstacleChallenge.h"
#include <vector>
#include <list>
#include <sstream>





/////////////////////////////////////////////////////////////
// Variables
/////////////////////////////////////////////////////////////

namespace newobstacleChallenge {
	//--- directions --------------------------
	static const int DIRECTION_FORWARD = 0;
	static const int DIRECTION_BACKWARD = 1;

	//--- action states -----------------------
	static const int STATE_GENERATE_Q = 0;
	static const int STATE_GOTO_TARGET = 1;
	static const int STATE_U_TURN = 2;
	static const int STATE_GOAL = 3;

	//--- sub action states -------------------
	static const int ACTION_DECIDE = 0;
	static const int ACTION_ROTATE = 1;
	static const int ACTION_LOCALISE = 2;
	static const int ACTION_SCAN_GAP = 3;
	static const int ACTION_ADJUST = 4;
	static const int ACTION_WALK = 5;

	//--- world grid constants ----------------
	static const int GRID_SIZE = 20;
	static const int NUM_ROWS = FIELD_LENGTH / GRID_SIZE;
	static const int NUM_COLS = FIELD_WIDTH / GRID_SIZE;
	static const int GOAL_START = (FIELD_WIDTH / 2) / GRID_SIZE;
	static const int GOAL_END = (FIELD_WIDTH / 2) / GRID_SIZE;

	static const double CAM_HANGLE = 25;
	static const int NUM_ACTIONS = 8;
	static const int NUM_UPDATES = 30;
	static const int OBS_MAX_DIST = 120;
	static const double OBS_DECAY = 0.1;
	static const double MEMORY_SHORT = 1.0;
	static const double MEMORY_MID = 10.0; //TODO
	static const double MEMORY_LONG = 15.0; //TODO

	//--- Q update probability constants ------
	static const double PROB0 = 0;
	static const double PROB1 = 0.55;
	static const double PROB2 = 0.1;
	static const double PROB3 = 0.05;
	static const double PROB4 = 0.05;
	static const double PROB5 = 0.05;

	//--- walk constants ----------------------
	static const double MAX_TURN = 30;
	static const double LARGE_TURN = 15;  //TODO
	static const double ADJUST_TURN = 10;  //TODO
	static const double VISION_OBS = 45;
	static const double VISION_HGAP = 15;
	static const double VISION_HEAD = 90;  //TODO
	static const double INFRARED_OBS = 40;  //TODO
	static const double INFRARED_EDGE = 30;
	static const double INFRARED_PAN = 20;  //TODO
	static const double PROB_SPEED = 0;
	static const double PROB_STOP = 0.8; //TODO

	//--- scan constants ----------------------
	static const double LOCALISE_TIME = 25;  //TODO
	static const double SCAN_DEGREE = 80;  //TODO
	static const double GAP_DEGREE = 90;  //TODO
	static const double OBS_DEGREE = 10;  //TODO

	//--- behaviour constants -----------------
	static const bool ONE_WAY = true;


	//--- current action state ----------------
	static int currentState;
	static int currentSubState;
	static int currentDirection;

	//--- internal counters -------------------
	static double lastPanX;
	static double lastTiltY;
	static int panDirection;
	static int reachGoalCount;
	static int debugCount;
	static int actLocaliseCount;

	//--- internal flag -----------------------
	static bool doGenerate;

	//--- localise variables ------------------
	static double localisedX;
	static double localisedY;
	static int localiseCount;

	//--- robot scan --------------------------
	static double leftRobotHead;
	static double rightRobotHead;
	static double leftSideRobotHead;
	static double rightSideRobotHead;
	static bool leftReached;
	static bool rightReached;

	//--- robot tracking ----------------------
	static bool infraRedTracking;
	static int infraRedTrackingCount;
	static double infraRedTrackingHead;
	static bool infraRedTrackingFound;
	static double infraRedTrackingTilt;
	static double infraRedTrackingPan;

	static bool robotTracking;
	static int robotTrackingCount;
	static double robotTrackingHead;
	static bool robotTrackingFound;

	static int lastPanDirection;


	//--- walk variables ----------------------
	static double walkH;
	static int walkCount;
	static double uTurnH;
	static bool fullSpeed;
	static bool stopLook;

	//--- position ----------------------------
	static double myX;
	static double myY;

	//--- queue -------------------------------
	static list<int> queue;
	static bool queueHash[NUM_ROWS *NUM_COLS];

	//--- priority queue ----------------------
	struct HashNode {
		int index;
		double priority;
	};

	static struct HashNode hash[NUM_ROWS *NUM_COLS *NUM_ACTIONS];
	static vector<int> heap;


	//--- world grid --------------------------
	static double wMap[NUM_ROWS][NUM_COLS];
	static double qGridForward[NUM_ROWS][NUM_COLS][NUM_ACTIONS + 1] = {
		{{ - 40.4648,
			 -39.7324,
			 -41.0246,
			 -44.3036,
			 -44.6213,
			 -44.6213,
			 -44.6213,
			 -44.2476,
			 1},
			 { - 38.476, -38.3785, -39.6772, -42.5918, -42.8729, -42.6906, -40.7646, -39.4652,1},
			 { - 37.7551,
				 -37.7663,
				 -39.0618,
				 -41.9143,
				 -42.1894,
				 -41.9705,
				 -39.6802,
				 -38.3881,
				 0},
				 { - 37.2548, -37.3193, -38.6148, -41.4166, -41.6865, -41.4615, -39.1088, -37.8097,0},
				 { - 36.8563,
					 -36.9755,
					 -38.2723,
					 -41.0234,
					 -41.2882,
					 -41.0581,
					 -38.655,
					 -37.3599,
					 0},
					 { - 36.5594, -36.7411, -38.0393, -40.7332, -40.9923, -40.7572, -38.3031, -37.0074,0},
					 { - 36.3771,
						 -36.6288,
						 -37.9278,
						 -40.5582,
						 -40.8109,
						 -40.57,
						 -38.0586,
						 -36.7615,
						 0},
						 { - 36.322, -36.6482, -37.9473, -40.5104, -40.7564, -40.5091, -37.9339, -36.6355,0},
						 { - 36.4017,
							 -36.8029,
							 -38.1017,
							 -40.5968,
							 -40.8361,
							 -40.5821,
							 -37.9394,
							 -36.6404,
							 0},
							 { - 36.617, -37.091, -38.3897, -40.8185, -41.0511, -40.7903, -38.0799, -36.7808,0},
							 { - 36.9649,
								 -37.5107,
								 -38.8106,
								 -41.173,
								 -41.399,
								 -41.1316,
								 -38.3548,
								 -37.0561,
								 0},
								 { - 37.4459, -38.0724, -39.3687, -41.6617, -41.8808, -41.6067, -38.7634, -37.4647,0},
								 { - 38.1554,
									 -39.1394,
									 -40.4438,
									 -42.375,
									 -42.5578,
									 -42.2768,
									 -39.3645,
									 -38.0648,
									 7},
									 { - 40.1367, -43.9241, -44.2983, -44.2983, -44.2983, -43.981, -40.7062, -39.4094,7}
		},
		{{ - 37.9999, -37.2588, -38.1574, -39.7194, -40.4591, -41.7692, -41.8956, -41.5457,1},
			{ - 36.0447, -35.9232, -36.8588, -38.3925, -38.7298, -39.4799, -38.0453, -37.0208,1},
			{ - 35.2927, -35.2833, -36.2243, -37.7472, -37.9859, -38.3655, -36.9024, -35.904,1},
			{ - 34.7921, -34.8332, -35.7798, -37.2983, -37.4801, -37.7922, -36.3147, -35.3227,0},
			{ - 34.3924, -34.4869, -35.4409, -36.9559, -37.0819, -37.3386, -35.8606, -34.8751,0},
			{ - 34.0927, -34.2499, -35.2119, -36.7227, -36.7865, -36.9865, -35.5028, -34.521,0},
			{ - 33.9077, -34.1359, -35.1057, -36.6111, -36.6056, -36.7419, -35.2508, -34.2722,0},
			{ - 33.8511, -34.1551, -35.1318, -36.6305, -36.5513, -36.6171, -35.1181, -34.1437,0},
			{ - 33.9307, -34.3105, -35.2934, -36.7848, -36.631, -36.6226, -35.116, -34.1472,0},
			{ - 34.1467, -34.5992, -35.5881, -37.0728, -36.8459, -36.763, -35.2495, -34.2877,0},
			{ - 34.4949, -35.0167, -36.014, -37.4936, -37.1936, -37.0378, -35.5182, -34.5637,0},
			{ - 34.9746, -35.5792, -36.5836, -38.0522, -37.6762, -37.4469, -35.9208, -34.9731,7},
			{ - 35.7141, -36.6846, -37.7157, -39.1565, -38.4117, -38.0771, -36.5425, -35.6003,7},
			{ - 37.6614, -41.2132, -41.5637, -41.4379, -40.1332, -39.3983, -37.8315, -36.9258,7}
		},
		{{ - 36.0063,
			 -35.2616,
			 -36.0902,
			 -37.4282,
			 -38.1607,
			 -39.7081,
			 -39.8582,
			 -39.5124,
			 1},
			 { - 34.032, -33.9045, -34.7701, -36.0737, -36.3958, -37.1614, -35.968, -35.007,1},
			 { - 33.2779,
				 -33.2639,
				 -34.1371,
				 -35.4315,
				 -35.6442,
				 -36.0535,
				 -34.8143,
				 -33.8855,
				 1},
				 { - 32.7762, -32.811, -33.6903, -34.9815, -35.1412, -35.4715, -34.2244, -33.3023,0},
				 { - 32.3741,
					 -32.4612,
					 -33.3483,
					 -34.6372,
					 -34.7425,
					 -35.0222,
					 -33.7723,
					 -32.8545,
					 0},
					 { - 32.0698, -32.2197, -33.1154, -34.4009, -34.4441, -34.6679, -33.4116, -32.4966,0},
					 { - 31.8804,
						 -32.1026,
						 -33.0064,
						 -34.2869,
						 -34.2602,
						 -34.4201,
						 -33.1555,
						 -32.2431,
						 0},
						 { - 31.8214, -32.1209, -33.0317, -34.3054, -34.2042, -34.2929, -33.0194, -32.1109,0},
						 { - 31.9009,
							 -32.2774,
							 -33.194,
							 -34.46,
							 -34.2838,
							 -34.2974,
							 -33.0157,
							 -32.1128,
							 0},
							 { - 32.1185, -32.5676, -33.4897, -34.7485, -34.4993, -34.4381, -33.1496, -32.2538,0},
							 { - 32.4676,
								 -32.9847,
								 -33.9134,
								 -35.1677,
								 -34.8471,
								 -34.7133,
								 -33.4191,
								 -32.5311,
								 0},
								 { - 32.9477, -33.5484, -34.4841, -35.7308, -35.3291, -35.123, -33.8229, -32.942,7},
								 { - 33.6887,
									 -34.658,
									 -35.6262,
									 -36.8274,
									 -36.0682,
									 -35.7524,
									 -34.4429,
									 -33.5693,
									 7},
									 { - 35.6543, -39.1669, -39.5135, -39.364, -37.8237, -37.0963, -35.752, -34.9153,7}
		},
		{{ - 34.0902, -33.3442, -34.1579, -35.4481, -36.1905, -37.779, -37.9331, -37.5881,1},
			{ - 32.111, -31.9816, -32.8322, -34.0876, -34.4063, -35.1867, -34.0351, -33.0864,1},
			{ - 31.3545, -31.339, -32.1979, -33.4456, -33.6521, -34.0663, -32.876, -31.9619,1},
			{ - 30.8513, -30.8828, -31.7481, -32.9938, -33.15, -33.4834, -32.2844, -31.3771,0},
			{ - 30.4454, -30.5282, -31.4017, -32.6456, -32.7489, -33.0347, -31.8314, -30.9275,0},
			{ - 30.1355, -30.2813, -31.1639, -32.4048, -32.446, -32.6769, -31.4666, -30.5649,0},
			{ - 29.941, -30.1606, -31.0515, -32.2875, -32.2579, -32.4245, -31.2053, -30.3059,0},
			{ - 29.8792, -30.1781, -31.0759, -32.3049, -32.1995, -32.2937, -31.0651, -30.1694,0},
			{ - 29.959, -30.3361, -31.2395, -32.4603, -32.2789, -32.2968, -31.0598, -30.1696,0},
			{ - 30.1787, -30.6284, -31.5369, -32.75, -32.4958, -32.4381, -31.1944, -30.3116,0},
			{ - 30.5298, -31.0463, -31.9605, -33.1676, -32.8442, -32.7146, -31.4655, -30.5909,0},
			{ - 31.0107, -31.611, -32.5323, -33.7309, -33.3247, -33.1249, -31.8707, -31.0036,7},
			{ - 31.7536, -32.7232, -33.6794, -34.8394, -34.0659, -33.7537, -32.4915, -31.6325,7},
			{ - 33.7238, -37.2285, -37.5743, -37.4208, -35.84, -35.1032, -33.8059, -32.9838,7}
		},
		{{ - 32.1904,
			 -31.4436,
			 -32.2535,
			 -33.5336,
			 -34.2787,
			 -35.8758,
			 -36.0308,
			 -35.686,
			 1},
			 { - 30.2093, -30.0787, -30.9255, -32.1706, -32.4895, -33.2737, -32.131, -31.1853,1},
			 { - 29.4511,
				 -29.4345,
				 -30.2899,
				 -31.5277,
				 -31.7333,
				 -32.1495,
				 -30.9696,
				 -30.0591,
				 1},
				 { - 28.9458, -28.9743, -29.8363, -31.0727, -31.2299, -31.5645, -30.3759, -29.4723,0},
				 { - 28.5352,
					 -28.6138,
					 -29.4845,
					 -30.7197,
					 -30.8251,
					 -31.114,
					 -29.9208,
					 -29.0201,
					 0},
					 { - 28.2187, -28.3608, -29.2409, -30.4736, -30.5167, -30.7516, -29.551, -28.652,0},
					 { - 28.0185,
						 -28.236,
						 -29.1248,
						 -30.3524,
						 -30.3236,
						 -30.4938,
						 -29.2838,
						 -28.3866,
						 0},
						 { - 27.9537, -28.2528, -29.1485, -30.3687, -30.2625, -30.359, -29.1391, -28.2453,0},
						 { - 28.0341,
							 -28.4129,
							 -29.3138,
							 -30.5255,
							 -30.342,
							 -30.3606,
							 -29.132,
							 -28.244,
							 0},
							 { - 28.2567, -28.7082, -29.6137, -30.8172, -30.5609, -30.503, -29.2677, -28.3874,0},
							 { - 28.6106,
								 -29.1276,
								 -30.0385,
								 -31.2354,
								 -30.9112,
								 -30.7816,
								 -29.5414,
								 -28.6696,
								 0},
								 { - 29.0929, -29.6937, -30.6117, -31.8002, -31.3922, -31.1936, -29.9489, -29.085,7},
								 { - 29.8373,
									 -30.8073,
									 -31.7607,
									 -32.9121,
									 -32.1351,
									 -31.8228,
									 -30.5707,
									 -29.7152,
									 7},
									 { - 31.8091, -35.3117, -35.6572, -35.503, -33.9139, -33.1746, -31.887, -31.0683,7}
		},
		{{ - 30.2954, -29.5476, -30.3559, -31.6334, -32.3796, -33.9791, -34.1343, -33.7897,1},
			{ - 28.3128, -28.1811, -29.0264, -30.2688, -30.5884, -31.374, -30.2339, -29.2898,1},
			{ - 27.5528, -27.5352, -28.3893, -29.6246, -29.8305, -30.2479, -29.0708, -28.1617,1},
			{ - 27.0451, -27.0704, -27.9312, -29.1657, -29.3251, -29.6607, -28.475, -27.5726,0},
			{ - 26.6291, -26.7033, -27.5732, -28.807, -28.9157, -29.2075, -28.0171, -27.1174,0},
			{ - 26.3053, -26.4434, -27.3231, -28.5548, -28.6011, -28.8397, -27.6416, -26.743,0},
			{ - 26.0986, -26.314, -27.2028, -28.4295, -28.4023, -28.5757, -27.3677, -26.4705,0},
			{ - 26.0306, -26.3302, -27.226, -28.4448, -28.3383, -28.4364, -27.218, -26.3239,0},
			{ - 26.1119, -26.4931, -27.3938, -28.6034, -28.4183, -28.4366, -27.2091, -26.3209,0},
			{ - 26.3382, -26.7922, -27.6969, -28.898, -28.6399, -28.5805, -27.3465, -26.4664,0},
			{ - 26.6958, -27.2136, -28.1233, -29.3178, -28.9929, -28.8619, -27.6235, -26.7525,0},
			{ - 27.1799, -27.7814, -28.6982, -29.8841, -29.4753, -29.2765, -28.034, -27.1712,7},
			{ - 27.9257, -28.8965, -29.8486, -30.9976, -30.2194, -29.9066, -28.657, -27.8027,7},
			{ - 29.8988, -33.4003, -33.7457, -33.5912, -31.9998, -31.2596, -29.9745, -29.1572,7}
		},
		{{ - 28.4033,
			 -27.6544,
			 -28.4613,
			 -29.7375,
			 -30.4845,
			 -32.0855,
			 -32.2409,
			 -31.8963,
			 1},
			 { - 26.4191, -26.286, -27.1302, -28.3714, -28.6918, -29.4784, -28.3399, -27.3972,1},
			 { - 25.657,
				 -25.6383,
				 -26.4913,
				 -27.7256,
				 -27.9322,
				 -28.3506,
				 -27.175,
				 -26.2671,
				 1},
				 { - 25.1466, -25.1683, -26.0283, -27.2623, -27.4243, -27.761, -26.5766, -25.6753,0},
				 { - 24.7244,
					 -24.7936,
					 -25.6631,
					 -26.8971,
					 -27.0097,
					 -27.3047,
					 -26.1157,
					 -25.2165,
					 0},
					 { - 24.3924, -24.5258, -25.4058, -26.638, -26.6879, -26.9306, -25.7336, -24.8351,0},
					 { - 24.1782,
						 -24.3915,
						 -25.2809,
						 -26.5081,
						 -26.4829,
						 -26.6597,
						 -25.4522,
						 -24.5546,
						 0},
						 { - 24.1068, -24.4072, -25.3036, -26.5226, -26.4158, -26.5153, -25.2968, -24.402,0},
						 { - 24.1895,
							 -24.5737,
							 -25.4745,
							 -26.6836,
							 -26.4966,
							 -26.5142,
							 -25.2862,
							 -24.3973,
							 0},
							 { - 24.4205, -24.8776, -25.7819, -26.9818, -26.7217, -26.6602, -25.4258, -24.5456,0},
							 { - 24.7827,
								 -25.3014,
								 -26.2104,
								 -27.4037,
								 -27.0781,
								 -26.9453,
								 -25.707,
								 -24.8364,
								 0},
								 { - 25.269, -25.8715, -26.7872, -27.9719, -27.5623, -27.363, -26.1214, -25.2594,7},
								 { - 26.0166,
									 -26.9883,
									 -27.9392,
									 -29.0868,
									 -28.3078,
									 -27.9944,
									 -26.7457,
									 -25.8924,
									 7},
									 { - 27.991, -31.4914, -31.8367, -31.6821, -30.0895, -29.3486, -28.0646, -27.2485,7}
		},
		{{ - 26.5148, -25.7641, -26.5693, -27.8443, -28.5922, -30.1948, -30.3502, -30.0059,1},
			{ - 24.5282, -24.3933, -25.2362, -26.4764, -26.7978, -27.5855, -26.4488, -25.5081,1},
			{ - 23.7634, -23.7432, -24.5952, -25.8287, -26.0361, -26.4556, -25.2815, -24.3749,1},
			{ - 23.2497, -23.2674, -24.1265, -25.3603, -25.5255, -25.8634, -24.6801, -23.7797,0},
			{ - 22.8207, -22.8842, -23.7533, -24.9878, -25.1049, -25.4035, -24.2157, -23.317,0},
			{ - 22.4792, -22.6075, -23.4877, -24.721, -24.7751, -25.0223, -23.8262, -22.9276,0},
			{ - 22.2568, -22.4675, -23.3577, -24.586, -24.5629, -24.7436, -23.5364, -22.6381,0},
			{ - 22.1815, -22.4831, -23.3803, -24.5997, -24.4924, -24.5936, -23.3746, -22.4788,0},
			{ - 22.2662, -22.6541, -23.5552, -24.764, -24.5745, -24.5911, -23.3622, -22.4724,0},
			{ - 22.503, -22.9638, -23.8677, -25.0667, -24.804, -24.7399, -23.5048, -22.6242,0},
			{ - 22.8708, -23.3908, -24.2989, -25.4913, -25.1647, -25.0296, -23.7911, -22.921,0},
			{ - 23.3599, -23.9636, -24.8782, -26.0617, -25.6511, -25.4512, -24.2102, -23.3491,7},
			{ - 24.1097, -25.0827, -26.0321, -27.1784, -26.3983, -26.0842, -24.8363, -23.9841,7},
			{ - 26.0859, -29.5849, -29.9301, -29.7754, -28.1815, -27.4398, -26.1568, -25.3421,7}
		},
		{{ - 24.6317,
			 -23.8778,
			 -24.6805,
			 -25.954,
			 -26.7032,
			 -28.3079,
			 -28.4636,
			 -28.1196,
			 1},
			 { - 22.6411, -22.5033, -23.3447, -24.584, -24.9065, -25.6958, -24.5615, -23.6242,1},
			 { - 21.8721,
				 -21.8502,
				 -22.7011,
				 -23.9338,
				 -24.1421,
				 -24.563,
				 -23.3905,
				 -22.4859,
				 1},
				 { - 21.3544, -21.3677, -22.2259, -23.4596, -23.6282, -23.9675, -22.7854, -21.8862,0},
				 { - 20.9178,
					 -20.9749,
					 -21.8436,
					 -23.0788,
					 -23.201,
					 -23.5035,
					 -22.3169,
					 -21.4189,
					 0},
					 { - 20.5657, -20.688, -21.5687, -22.8032, -22.862, -23.1144, -21.9192, -21.0206,0},
					 { - 20.3338,
						 -20.5416,
						 -21.4329,
						 -22.6624,
						 -22.6418,
						 -22.8268,
						 -21.6199,
						 -20.7208,
						 0},
						 { - 20.2543, -20.5574, -21.4555, -22.6756, -22.5676, -22.6705, -21.4509, -20.5539,0},
						 { - 20.3415,
							 -20.7341,
							 -21.6356,
							 -22.844,
							 -22.6515,
							 -22.6667,
							 -21.4367,
							 -20.5457,
							 0},
							 { - 20.5856, -21.051, -21.9544, -23.1524, -22.8865, -22.8191, -21.5829, -20.7019,0},
							 { - 20.9604,
								 -21.4819,
								 -22.3889,
								 -23.5803,
								 -23.2525,
								 -23.1145,
								 -21.8758,
								 -21.0061,
								 0},
								 { - 21.4529, -22.0583, -22.9714, -24.1535, -23.7417, -23.541, -22.3007, -21.4406,7},
								 { - 22.2056,
									 -23.1804,
									 -24.1278,
									 -25.2723,
									 -24.491,
									 -24.1759,
									 -22.9289,
									 -22.0781,
									 7},
									 { - 24.1841, -27.6814, -28.0263, -27.8715, -26.276, -25.5333, -24.2516, -23.4386,7}
		},
		{{ - 22.759, -21.9985, -22.7969, -24.0682, -24.8194, -26.4278, -26.5838, -26.2406,1},
			{ - 20.7603, -20.6174, -21.4568, -22.6949, -23.019, -23.8106, -22.6807, -21.7502,1},
			{ - 19.9838, -19.9596, -20.8092, -22.041, -22.2506, -22.6733, -21.5033, -20.6019,1},
			{ - 19.461, -19.4695, -20.3265, -21.56, -21.7326, -22.0735, -20.8928, -19.995,0},
			{ - 19.0158, -19.0659, -19.9341, -21.17, -21.2978, -21.6048, -20.4196, -19.5221,0},
			{ - 18.652, -18.7673, -19.6485, -20.8845, -20.9486, -21.2068, -20.0127, -19.1141,0},
			{ - 18.4091, -18.6136, -19.5061, -20.7372, -20.7193, -20.9093, -19.7026, -18.8028,0},
			{ - 18.3247, -18.6297, -19.5292, -20.75, -20.641, -20.7458, -19.5254, -18.627,0},
			{ - 18.4153, -18.8135, -19.7155, -20.9235, -20.7273, -20.7407, -19.5092, -18.617,0},
			{ - 18.6683, -19.1394, -20.0422, -21.2389, -20.969, -20.8976, -19.6602, -18.7788,0},
			{ - 19.0516, -19.5751, -20.4808, -21.6708, -21.3416, -21.2, -19.961, -19.092,0},
			{ - 19.5486, -20.1562, -21.0674, -22.2476, -21.8344, -21.6326, -20.3932, -19.5344,7},
			{ - 20.3053, -21.2828, -22.2273, -23.3693, -22.5864, -22.2701, -21.0242, -20.1751,7},
			{ - 22.2874, -25.7818, -26.1265, -25.9715, -24.3739, -23.6298, -22.3496, -21.5392,7}
		},
		{{ - 20.9067,
			 -20.1334,
			 -20.9228,
			 -22.1903,
			 -22.9452,
			 -24.561,
			 -24.7177,
			 -24.3758,
			 1},
			 { - 18.8924, -18.7384, -19.5745, -20.8111, -21.1378, -21.9337, -20.8127, -19.8952,1},
			 { - 18.1004,
				 -18.0717,
				 -18.9203,
				 -20.1512,
				 -20.3623,
				 -20.7879,
				 -19.6224,
				 -18.7276,
				 1},
				 { - 17.5694, -17.573, -18.4288, -19.662, -19.8389, -20.1817, -19.0029, -18.107,0},
				 { - 17.1151,
					 -17.1572,
					 -18.0247,
					 -19.2613,
					 -19.3956,
					 -19.7074,
					 -18.5237,
					 -17.6265,
					 0},
					 { - 16.7379, -16.8452, -17.7269, -18.9646, -19.0348, -19.2996, -18.1068, -17.2082,0},
					 { - 16.4823,
						 -16.683,
						 -17.577,
						 -18.8098,
						 -18.7951,
						 -18.9907,
						 -17.7845,
						 -16.8838,
						 0},
						 { - 16.3924, -16.6999, -17.6008, -18.8225, -18.7121, -18.8191, -17.5978, -16.6977,0},
						 { - 16.4872,
							 -16.8923,
							 -17.7949,
							 -19.0024,
							 -18.8015,
							 -18.8127,
							 -17.5795,
							 -16.6857,
							 0},
							 { - 16.7511, -17.2291, -18.1312, -19.3263, -19.0517, -18.9753, -17.7364, -16.8544,0},
							 { - 17.1448,
								 -17.671,
								 -18.575,
								 -19.7633,
								 -19.4323,
								 -19.2863,
								 -18.047,
								 -17.1786,
								 0},
								 { - 17.6476, -18.2588, -19.1671, -20.3448, -19.9296, -19.7265, -18.4881, -17.6308,7},
								 { - 18.4107,
									 -19.3929,
									 -20.3324,
									 -21.4707,
									 -20.6856,
									 -20.3675,
									 -19.123,
									 -18.2761,
									 7},
									 { - 20.3987, -23.8885, -24.2326, -24.0773, -22.4765, -21.7305, -20.4525, -19.6458,7}
		},
		{{ - 19.0938, -18.2959, -19.0678, -20.3272, -21.0897, -22.72, -22.8781, -22.5389,1},
			{ - 17.0493, -16.874, -17.7025, -18.9368, -19.2684, -20.0731, -18.9691, -18.0771,1},
			{ - 16.2275, -16.1883, -17.0356, -18.266, -18.4793, -18.9102, -17.7539, -16.8722,1},
			{ - 15.6801, -15.6791, -16.5332, -17.7661, -17.9476, -18.293, -17.1171, -16.2262,1},
			{ - 15.216, -15.2489, -16.1156, -17.353, -17.4943, -17.8115, -16.6289, -15.7319,0},
			{ - 14.8236, -14.9214, -15.8037, -17.0434, -17.1208, -17.3929, -16.2017, -15.3035,0},
			{ - 14.5532, -14.7493, -15.645, -16.8801, -16.8689, -17.0712, -15.8654, -14.9638,0},
			{ - 14.4566, -14.7673, -15.67, -16.8927, -16.7806, -16.8901, -15.6677, -14.7657,0},
			{ - 14.5569, -14.9704, -15.8737, -17.0805, -16.874, -16.8823, -15.647, -14.7514,0},
			{ - 14.8341, -15.3203, -16.2217, -17.415, -17.1345, -17.052, -15.8113, -14.9287,0},
			{ - 15.2405, -15.7702, -16.6721, -17.8583, -17.5249, -17.3736, -16.1339, -15.2664,0},
			{ - 15.7514, -16.3688, -17.2723, -18.4462, -18.0282, -17.8235, -16.5862, -15.7307,7},
			{ - 16.5256, -17.5176, -18.4471, -19.579, -18.7903, -18.4698, -17.2271, -16.3833,7},
			{ - 18.5253, -22.0058, -22.3489, -22.193, -20.5867, -19.8378, -18.5631, -17.7628,7}
		},
		{{ - 17.3541,
			 -16.5116,
			 -17.2496,
			 -18.4934,
			 -19.2706,
			 -20.9288,
			 -21.0896,
			 -20.7553,
			 1},
			 { - 15.2542, -15.0379, -15.8516, -17.0803, -17.4221, -18.2438, -17.1727, -16.3273,1},
			 { - 14.375,
				 -14.3161,
				 -15.1583,
				 -16.3883,
				 -16.606,
				 -17.0482,
				 -15.9097,
				 -15.0538,
				 1},
				 { - 13.798, -13.7897, -14.6417, -15.8737, -16.0598, -16.4097, -15.2408, -14.3595,1},
				 { - 13.3192,
					 -13.3414,
					 -14.207,
					 -15.4452,
					 -15.5946,
					 -15.917,
					 -14.7356,
					 -13.8414,
					 0},
					 { - 12.9092, -12.9957, -13.8788, -15.1207, -15.2065, -15.487, -14.2979, -13.4002,0},
					 { - 12.6212,
						 -12.8117,
						 -13.7097,
						 -14.9474,
						 -14.9405,
						 -15.1505,
						 -13.9454,
						 -13.0428,
						 0},
						 { - 12.5168, -12.8316, -13.7364, -14.9603, -14.846, -14.9583, -13.7347, -12.8304,0},
						 { - 12.624,
							 -13.0477,
							 -13.9517,
							 -15.1578,
							 -14.9444,
							 -14.9491,
							 -13.7112,
							 -12.8133,
							 0},
							 { - 12.9172, -13.4132, -14.3139, -15.505, -15.2173, -15.1275, -13.8847, -13.0013,0},
							 { - 13.3389,
								 -13.8741,
								 -14.773,
								 -15.9563,
								 -15.62,
								 -15.4621,
								 -14.2219,
								 -13.3554,
								 0},
								 { - 13.8623, -14.4927, -15.3867, -16.5541, -16.1318, -15.9247, -14.6887, -13.8353,7},
								 { - 14.6591,
									 -15.6717,
									 -16.5807,
									 -17.6995,
									 -16.9046,
									 -16.5802,
									 -15.3397,
									 -14.5007,
									 7},
									 { - 16.6834, -20.1443, -20.4852, -20.3283, -18.7112, -17.9568, -16.6878, -15.9006,7}
		},
		{{ - 15.742, -14.8245, -15.5006, -16.7141, -17.5192, -19.2286, -19.3943, -19.0682,1},
			{ - 13.5472, -13.2575, -14.0407, -15.2581, -15.6195, -16.4738, -15.4622, -14.6966,1},
			{ - 12.5646, -12.4652, -13.2981, -14.5251, -14.7529, -15.2168, -14.1131, -13.3048,1},
			{ - 11.9289, -11.9069, -12.7567, -13.9875, -14.1781, -14.538, -13.383, -12.5226,1},
			{ - 11.4252, -11.4354, -12.2997, -13.5388, -13.6973, -14.0246, -12.8474, -11.9582,0},
			{ - 10.9949, -11.0678, -11.9517, -13.1964, -13.292, -13.5824, -12.3956, -11.498,0},
			{ - 10.6859, -10.8694, -11.7703, -13.0112, -13.0093, -13.2285, -12.0244, -11.1208,0},
			{ - 10.572, -10.8921, -11.7994, -13.0248, -12.9075, -13.0232, -11.7982, -10.8913,0},
			{ - 10.688, -11.1244, -12.029, -13.2341, -13.0122, -13.0124, -11.7714, -10.8706,0},
			{ - 11.0007, -11.5067, -12.4076, -13.5965, -13.3002, -13.2014, -11.9561, -11.072,0},
			{ - 11.4402, -11.9865, -12.8795, -14.0587, -13.7182, -13.5524, -12.3116, -11.4467,0},
			{ - 11.9872, -12.6457, -13.5193, -14.6735, -14.2433, -14.0326, -12.7979, -11.9462,7},
			{ - 12.8315, -13.8852, -14.7529, -15.8447, -15.0367, -14.7052, -13.468, -12.6389,7},
			{ - 14.9049, -18.3266, -18.6632, -18.5042, -16.8644, -16.0987, -14.8413, -14.0817,7}
		},
		{{ - 14.3331,
			 -13.3031,
			 -13.8737,
			 -15.0317,
			 -15.8867,
			 -17.6836,
			 -17.8576,
			 -17.5442,
			 1},
			 { - 11.9917, -11.5795, -12.304, -13.4971, -13.8962, -14.8089, -13.8975, -13.2553,1},
			 { - 10.8354,
				 -10.6607,
				 -11.4705,
				 -12.6918,
				 -12.9385,
				 -13.4443,
				 -12.4043,
				 -11.6793,
				 1},
				 { - 10.0907, -10.0354, -10.883, -12.1134, -12.311, -12.6897, -11.5641, -10.7455,1},
				 { - 9.53526,
					 -9.53329,
					 -10.3956,
					 -11.6352,
					 -11.8045,
					 -12.1389,
					 -10.9696,
					 -10.0945,
					 1},
					 { - 9.08116, -9.13727, -10.0221, -11.2699, -11.3772, -11.6789, -10.4941, -9.59524,0},
					 { - 8.74678,
						 -8.92118,
						 -9.8257,
						 -11.0707,
						 -11.075,
						 -11.3052,
						 -10.1025,
						 -9.19835,
						 0},
						 { - 8.62071, -8.94798, -9.85849, -11.0854, -10.9644, -11.0843, -9.85757, -8.94737,0},
						 { - 8.74829,
							 -9.201,
							 -10.1059,
							 -11.3092,
							 -11.0771,
							 -11.0716,
							 -9.82652,
							 -8.92205,
							 0},
							 { - 9.08543, -9.60194, -10.5022, -11.6894, -11.3833, -11.2736, -10.0252, -9.14031,0},
							 { - 9.54788,
								 -10.1194,
								 -10.9978,
								 -12.1682,
								 -11.8213,
								 -11.6462,
								 -10.4052,
								 -9.54253,
								 7},
								 { - 10.1434, -10.8581, -11.6899, -12.8158, -12.3693, -12.1525, -10.918, -10.0705,7},
								 { - 11.0818,
									 -12.2123,
									 -13.0018,
									 -14.0398,
									 -13.2047,
									 -12.8581,
									 -11.6278,
									 -10.8218,
									 7},
									 { - 13.2483, -16.5961, -16.9246, -16.7612, -15.0758, -14.2865, -13.0538, -12.3496,7}
		},
		{{ - 13.215, -12.0352, -12.4456, -13.509, -14.446, -16.3776, -16.5642, -16.2681,1},
			{ - 10.6708, -10.0792, -10.6966, -11.8417, -12.3072, -13.3172, -12.5577, -12.0862,1},
			{ - 9.25477, -8.94781, -9.70792, -10.9126, -11.1975, -11.7788, -10.8475, -10.2519,1},
			{ - 8.31945, -8.19647, -9.03037, -10.2614, -10.4727, -10.8905, -9.82269, -9.08427,1},
			{ - 7.66429, -7.64038, -8.49966, -9.73922, -9.92029, -10.2677, -9.11938, -8.27703,1},
			{ - 7.16952, -7.20433, -8.09001, -9.3417, -9.463, -9.77682, -8.59346, -7.70104,0},
			{ - 6.80311, -6.96533, -7.87468, -9.12494, -9.13698, -9.38058, -8.18034, -7.27558,0},
			{ - 6.66122, -6.99825, -7.91265, -9.14148, -9.01551, -9.14067, -7.912, -6.99783,0},
			{ - 6.80418, -7.2775, -8.18283, -9.38354, -9.13855, -9.12561, -7.87528, -6.96596,0},
			{ - 7.17266, -7.70635, -8.5997, -9.78369, -9.46732, -9.34438, -8.09231, -7.20651,0},
			{ - 7.67501, -8.29918, -9.1443, -10.2933, -9.9329, -9.74799, -8.50757, -7.648,7},
			{ - 8.36725, -9.18692, -9.93765, -11.0067, -10.5253, -10.2947, -9.06145, -8.22794,7},
			{ - 9.48002, -10.7351, -11.3934, -12.3318, -11.443, -11.0646, -9.85163, -9.09517,7},
			{ - 11.8022, -15.027, -15.3419, -15.1703, -13.3989, -12.5635, -11.3805, -10.781,7}
		},
		{{ - 12.3949,
			 -11.1139,
			 -11.3031,
			 -12.2223,
			 -13.2793,
			 -15.3957,
			 -15.5996,
			 -15.3176,
			 1},
			 { - 9.67654, -8.85088, -9.29536, -10.3498, -10.9246, -12.0788, -11.5182, -11.1944,1},
			 { - 7.91996,
				 -7.40864,
				 -8.06638,
				 -9.23252,
				 -9.58734,
				 -10.2949,
				 -9.52998,
				 -9.12494,
				 1},
				 { - 6.6866, -6.43102, -7.22876, -8.45197, -8.69573, -9.18793, -8.22759, -7.62358,1},
				 { - 5.84111,
					 -5.7638,
					 -6.62073,
					 -7.86017,
					 -8.05317,
					 -8.43217,
					 -7.33141,
					 -6.56264,
					 1},
					 { - 5.26042, -5.27111, -6.15722, -7.4134, -7.55191, -7.87752, -6.70566, -5.83389,0},
					 { - 4.8541,
						 -4.9986,
						 -5.9148,
						 -7.17213,
						 -7.19423,
						 -7.45476,
						 -6.25719,
						 -5.34852,
						 0},
						 { - 4.69075, -5.04273, -5.96114, -7.19203, -7.05943, -7.19146, -5.9607, -5.04244,0},
						 { - 4.85482,
							 -5.34973,
							 -6.25896,
							 -7.45691,
							 -7.19533,
							 -7.1726,
							 -5.91521,
							 -4.99904,
							 0},
							 { - 5.26269, -5.83833, -6.71079, -7.88311, -7.55523, -7.41544, -6.15897, -5.27277,0},
							 { - 5.85051,
								 -6.58259,
								 -7.35382,
								 -8.455,
								 -8.064,
								 -7.86752,
								 -6.62737,
								 -5.77013,
								 7},
								 { - 6.73015, -7.71757, -8.33264, -9.29404, -8.74334, -8.4818, -7.25672, -6.45952,7},
								 { - 8.12682,
									 -9.57262,
									 -10.0254,
									 -10.799,
									 -9.81185,
									 -9.37121,
									 -8.19767,
									 -7.54338,
									 7},
									 { - 10.6933, -13.7262, -14.0199, -13.8348, -11.9197, -11.0004, -9.91134, -9.48407,7}
		},
		{{ - 11.7749, -10.4725, -10.4991, -11.2216, -12.4262, -14.6979, -14.9159, -14.6397,1},
			{ - 8.9685, -8.01853, -8.18485, -9.08621, -9.81742, -11.1546, -10.7553, -10.5034,1},
			{ - 6.97581, -6.15597, -6.63213, -7.71391, -8.1893, -9.08337, -8.54615, -8.29266,1},
			{ - 5.30776, -4.8279, -5.53561, -6.73344, -7.04167, -7.66689, -6.88653, -6.52249,1},
			{ - 4.13645, -3.93534, -4.77519, -6.01759, -6.23261, -6.67692, -5.67738, -5.04287,1},
			{ - 3.37521, -3.34728, -4.23215, -5.49262, -5.65294, -5.9992, -4.85991, -4.04885,1},
			{ - 2.90076, -3.01596, -3.94276, -5.21037, -5.24599, -5.52735, -4.33044, -3.4256,0},
			{ - 2.7044, -3.08136, -4.00409, -5.23617, -5.0943, -5.23579, -4.00379, -3.08118,0},
			{ - 2.90125, -3.42648, -4.33154, -5.52887, -5.24675, -5.21069, -3.94305, -3.01626,0},
			{ - 3.37706, -4.05269, -4.8643, -6.00383, -5.6555, -5.4942, -4.23352, -3.34859,7},
			{ - 4.1448, -5.06084, -5.69763, -6.69747, -6.242, -6.02379, -4.7807, -3.94085,7},
			{ - 5.34747, -6.60873, -6.98282, -7.76391, -7.08501, -6.76034, -5.56097, -4.85383,7},
			{ - 7.16616, -8.70676, -9.00581, -9.54121, -8.39469, -7.84113, -6.75263, -6.27964,7},
			{ - 9.91133, -12.8116, -13.0913, -12.885, -10.7458, -9.69234, -8.76003, -8.60987,7}
		},
		{{ - 11.3596,
			 -10.0245,
			 -9.94946,
			 -10.5316,
			 -11.8235,
			 -14.164,
			 -14.3878,
			 -14.1222,
			 2},
			 { - 8.48145, -7.47254, -7.46918, -8.12347, -9.04899, -10.5086, -10.1885, -10.0448,2},
			 { - 6.34373,
				 -5.41145,
				 -5.51459,
				 -6.43372,
				 -7.09085,
				 -8.22675,
				 -7.86045,
				 -7.70095,
				 1},
				 { - 4.42618, -3.51487, -4.04564, -5.17311, -5.60466, -6.44178, -5.94703, -5.7412,1},
				 { - 2.67852,
					 -2.24434,
					 -3.019,
					 -4.25419,
					 -4.52213,
					 -5.09785,
					 -4.28974,
					 -3.9798,
					 1},
					 { - 1.57374, -1.44787, -2.33055, -3.59497, -3.77975, -4.17725, -3.12381, -2.42982,1},
					 { - 0.944672,
						 -1.01232,
						 -1.95569,
						 -3.23948,
						 -3.29487,
						 -3.59867,
						 -2.41521,
						 -1.54885,
						 0},
						 { - 0.692879, -1.1077, -2.04035, -3.2727, -3.11622, -3.27244, -2.04016, -1.10761,0},
						 { - 0.944986,
							 -1.54954,
							 -2.41602,
							 -3.59959,
							 -3.29537,
							 -3.23969,
							 -1.95588,
							 -1.01252,
							 0},
							 { - 1.57528, -2.43314, -3.12763, -4.1812, -3.7816, -3.59619, -2.33163, -1.4489,7},
							 { - 2.68595,
								 -3.996,
								 -4.30803,
								 -5.11644,
								 -4.53043,
								 -4.25935,
								 -3.0238,
								 -2.24922,
								 7},
								 { - 4.46213, -5.81879, -6.03518, -6.53064, -5.64413, -5.19745, -4.06861, -3.53836,7},
								 { - 6.51747,
									 -8.08085,
									 -8.28581,
									 -8.65282,
									 -7.28037,
									 -6.55086,
									 -5.62551,
									 -5.52514,
									 7},
									 { - 9.36511, -12.1854, -12.4568, -12.2364, -9.93707, -8.70027, -8.01701, -8.0338,6}
		},
		{{ - 11.3651, -9.98887, -9.63787, -10.111, -11.4182, -13.8657, -14.1001, -13.8616,2},
			{ - 8.45359, -7.33962, -7.0878, -7.58906, -8.59947, -10.0926, -9.90658, -10.0395,2},
			{ - 6.14906, -5.07947, -4.94717, -5.52462, -6.44064, -7.71095, -7.46473, -7.5692,2},
			{ - 3.97276, -2.90422, -2.90773, -3.87468, -4.51074, -5.66503, -5.36148, -5.38525,1},
			{ - 1.88852, -0.811217, -1.45346, -2.64678, -3.03325, -3.84349, -3.4244, -3.32927,1},
			{0.0337708,0.359996, -0.501513, -1.77362, -1.99772, -2.51515, -1.65155, -1.41256,1},
			{0.99479,1.02272,0.0500434, -1.25957, -1.34746, -1.68694, -0.558602,0.251724,1},
			{1.35756,0.866638, -0.0670153, -1.30144, -1.12066, -1.30127, -0.0669151,0.866706,0},
			{0.994543,0.251173, -0.559269, -1.68766, -1.34782, -1.25973,0.0498924,1.02256,7},
			{0.0324763, -1.41539, -1.65488, -2.51861, -1.99925, -1.77459, -0.502369,0.359137,7},
			{ - 1.89501, -3.34347, -3.44084, -3.86026, -3.04063, -2.65129, -1.45769, -0.815508,7},
			{ - 4.00525, -5.4574, -5.44104, -5.74642, -4.5467, -3.89679, -2.92859, -2.92547,7},
			{ - 6.30952, -7.91587, -7.85441, -8.10449, -6.61493, -5.63199, -5.04877, -5.18343,6},
			{ - 9.24167, -11.8038, -12.0488, -11.8202, -9.43029, -8.11834, -7.58903, -7.85532,6}
		},
		{{ - 12.1359,
			 -10.7248,
			 -9.86686,
			 -10.0323,
			 -11.3752,
			 -14.0965,
			 -14.3579,
			 -14.1663,
			 2},
			 { - 9.23606, -8.05286, -7.23321, -7.45758, -8.49026, -10.0495, -10.1842, -10.8102,2},
			 { - 6.87816,
				 -5.7248,
				 -4.93616,
				 -5.26811,
				 -6.24254,
				 -7.58796,
				 -7.65701,
				 -8.26391,
				 2},
				 { - 4.59383, -3.38379, -2.6721, -3.10963, -4.11377, -5.40503, -5.38984, -5.97838,2},
				 { - 2.24949,
					 -0.882902,
					 -0.387714,
					 -1.42325,
					 -2.0317,
					 -3.29084,
					 -3.16569,
					 -3.71761,
					 2},
					 {0.257686,2.03759,1.11604, -0.176648, -0.498449, -1.2617, -0.987383, -1.43915,1},
					 {2.93149,2.97401,1.99568,0.647127,0.50614,0.0762315,1.02007,0.855749,1},
					 {3.47982,3.08728,1.96109,0.718269,0.937148,0.718354,1.96117,3.08733,0},
					 {2.93131,0.855332,1.01954,0.0756431,0.505903,0.647004,1.99556,2.97389,7},
					 {0.256644, -1.44145, -0.990191, -1.2647, -0.499731, -0.177406,1.11534,2.03689,7},
					 { - 2.25496,
						 -3.72953,
						 -3.17997,
						 -3.30582,
						 -2.03817,
						 -1.42714,
						 -0.391348,
						 -0.886559,
						 6},
						 { - 4.62197, -6.0408, -5.46314, -5.47797, -4.14598, -3.12931, -2.69057, -3.40249,6},
						 { - 7.02909,
							 -8.62468,
							 -8.0196,
							 -7.95111,
							 -6.40413,
							 -5.36941,
							 -5.03189,
							 -5.82208,
							 6},
							 { - 9.95025, -11.9951, -12.188, -11.933, -9.27669, -7.93711, -7.68909, -8.52202,6}
		},
		{{ - 15.9219, -15.5368, -11.6517, -11.0348, -12.4186, -15.6135, -15.9219, -15.9219,3},
			{ - 12.9955, -12.6295, -8.93637, -8.33311, -9.39378, -11.0495, -11.6937, -12.8805,3},
			{ - 10.6456, -10.2805, -6.59815, -6.01319, -7.04245, -8.52486, -9.13726, -10.5116,3},
			{ - 8.33906, -7.96745, -4.22755, -3.71098, -4.75614, -6.22192, -6.82214, -8.20417,3},
			{ - 5.91286, -5.52454, -1.63458, -1.27886, -2.41254, -3.89363, -4.46929, -5.78446,3},
			{ - 3.24165, -2.79911,1.48746,0.514571, -0.0274409, -1.49716, -1.98928, -3.12997,2},
			{0.91508,5.33845,3.67209,2.21014,1.9711,1.28441,1.09146,0.510164,1},
			{5.57976,1.57858,3.34794,2.24253,2.51767,2.24259,3.34798,1.57858,0},
			{0.914962,0.510019,1.09109,1.28395,1.97093,2.21006,3.67202,5.33837,7},
			{ - 3.24242, -3.13086, -1.99141, -1.49961, -0.0284309,0.51402,1.48693, -2.79985,6},
			{ - 5.91698, -5.78921, -4.48036, -3.90618, -2.41769, -1.28179, -1.6374, -5.52855,5},
			{ - 8.36061, -8.22902, -6.88065, -6.28716, -4.78273, -3.72626, -4.24234, -7.98839,5},
			{ - 10.7607, -10.6475, -9.47973, -8.84887, -7.18039, -6.09434, -6.67713, -10.3922,5},
			{ - 13.7183, -13.7183, -13.7183, -13.4112, -10.2278, -8.8316, -9.43044, -13.3315,5}
		}
	};

	static double qGridBackward[NUM_ROWS][NUM_COLS][NUM_ACTIONS + 1] = {
		{{ - 12.4186,
			 -11.0348,
			 -11.6517,
			 -15.5368,
			 -15.9219,
			 -15.9219,
			 -15.9219,
			 -15.6135,
			 1},
			 { - 9.39378, -8.33311, -8.93637, -12.6295, -12.9955, -12.8805, -11.6937, -11.0495,1},
			 { - 7.04245,
				 -6.01319,
				 -6.59815,
				 -10.2805,
				 -10.6456,
				 -10.5116,
				 -9.13726,
				 -8.52486,
				 1},
				 { - 4.75614, -3.71098, -4.22755, -7.96745, -8.33906, -8.20417, -6.82214, -6.22192,1},
				 { - 2.41254,
					 -1.27886,
					 -1.63458,
					 -5.52454,
					 -5.91286,
					 -5.78446,
					 -4.46929,
					 -3.89363,
					 1},
					 { - 0.0274409,0.514571,1.48746, -2.79911, -3.24165, -3.12997, -1.98928, -1.49716,2},
					 {1.9711,2.21014,3.67209,5.33845,0.91508,0.510164,1.09146,1.28441,3},
					 {2.51767,2.24253,3.34794,1.57858,5.57976,1.57858,3.34798,2.24259,4},
					 {1.97093,1.28395,1.09109,0.510019,0.914962,5.33837,3.67202,2.21006,5},
					 { - 0.0284309, -1.49961, -1.99141, -3.13086, -3.24242, -2.79985,1.48693,0.51402,6},
					 { - 2.41769,
						 -3.90618,
						 -4.48036,
						 -5.78921,
						 -5.91698,
						 -5.52855,
						 -1.6374,
						 -1.28179,
						 7},
						 { - 4.78273, -6.28716, -6.88065, -8.22902, -8.36061, -7.98839, -4.24234, -3.72626,7},
						 { - 7.18039,
							 -8.84887,
							 -9.47973,
							 -10.6475,
							 -10.7607,
							 -10.3922,
							 -6.67713,
							 -6.09434,
							 7},
							 { - 10.2278, -13.4112, -13.7183, -13.7183, -13.7183, -13.3315, -9.43044, -8.8316,7}
		},
		{{ - 11.3752, -10.0323, -9.86686, -10.7248, -12.1359, -14.1663, -14.3579, -14.0965,2},
			{ - 8.49026, -7.45758, -7.23321, -8.05286, -9.23606, -10.8102, -10.1842, -10.0495,2},
			{ - 6.24254, -5.26811, -4.93616, -5.7248, -6.87816, -8.26391, -7.65701, -7.58796,2},
			{ - 4.11377, -3.10963, -2.6721, -3.38379, -4.59383, -5.97838, -5.38984, -5.40503,2},
			{ - 2.0317, -1.42325, -0.387714, -0.882902, -2.24949, -3.71761, -3.16569, -3.29084,2},
			{ - 0.498449, -0.176648,1.11604,2.03759,0.257686, -1.43915, -0.987383, -1.2617,3},
			{0.50614,0.647127,1.99568,2.97401,2.93149,0.855749,1.02007,0.0762315,3},
			{0.937148,0.718269,1.96109,3.08728,3.47982,3.08733,1.96117,0.718354,4},
			{0.505903,0.0756431,1.01954,0.855332,2.93131,2.97389,1.99556,0.647004,5},
			{ - 0.499731, -1.2647, -0.990191, -1.44145,0.256644,2.03689,1.11534, -0.177406,5},
			{ - 2.03817, -3.30582, -3.17997, -3.72953, -2.25496, -0.886559, -0.391348, -1.42714,6},
			{ - 4.14598, -5.47797, -5.46314, -6.0408, -4.62197, -3.40249, -2.69057, -3.12931,6},
			{ - 6.40413, -7.95111, -8.0196, -8.62468, -7.02909, -5.82208, -5.03189, -5.36941,6},
			{ - 9.27669, -11.933, -12.188, -11.9951, -9.95025, -8.52202, -7.68909, -7.93711,6}
		},
		{{ - 11.4182,
			 -10.111,
			 -9.63787,
			 -9.98887,
			 -11.3651,
			 -13.8616,
			 -14.1001,
			 -13.8657,
			 2},
			 { - 8.59947, -7.58906, -7.0878, -7.33962, -8.45359, -10.0395, -9.90658, -10.0926,2},
			 { - 6.44064,
				 -5.52462,
				 -4.94717,
				 -5.07947,
				 -6.14906,
				 -7.5692,
				 -7.46473,
				 -7.71095,
				 2},
				 { - 4.51074, -3.87468, -2.90773, -2.90422, -3.97276, -5.38525, -5.36148, -5.66503,3},
				 { - 3.03325,
					 -2.64678,
					 -1.45346,
					 -0.811217,
					 -1.88852,
					 -3.32927,
					 -3.4244,
					 -3.84349,
					 3},
					 { - 1.99772, -1.77362, -0.501513,0.359996,0.0337708, -1.41256, -1.65155, -2.51515,3},
					 { - 1.34746,
						 -1.25957,
						 0.0500434,
						 1.02272,
						 0.99479,
						 0.251724,
						 -0.558602,
						 -1.68694,
						 3},
						 { - 1.12066, -1.30144, -0.0670153,0.866638,1.35756,0.866706, -0.0669151, -1.30127,4},
						 { - 1.34782,
							 -1.68766,
							 -0.559269,
							 0.251173,
							 0.994543,
							 1.02256,
							 0.0498924,
							 -1.25973,
							 5},
							 { - 1.99925, -2.51861, -1.65488, -1.41539,0.0324763,0.359137, -0.502369, -1.77459,5},
							 { - 3.04063,
								 -3.86026,
								 -3.44084,
								 -3.34347,
								 -1.89501,
								 -0.815508,
								 -1.45769,
								 -2.65129,
								 5},
								 { - 4.5467, -5.74642, -5.44104, -5.4574, -4.00525, -2.92547, -2.92859, -3.89679,5},
								 { - 6.61493,
									 -8.10449,
									 -7.85441,
									 -7.91587,
									 -6.30952,
									 -5.18343,
									 -5.04877,
									 -5.63199,
									 6},
									 { - 9.43029, -11.8202, -12.0488, -11.8038, -9.24167, -7.85532, -7.58903, -8.11834,6}
		},
		{{ - 11.8235, -10.5316, -9.94946, -10.0245, -11.3596, -14.1222, -14.3878, -14.164,2},
			{ - 9.04899, -8.12347, -7.46918, -7.47254, -8.48145, -10.0448, -10.1885, -10.5086,2},
			{ - 7.09085, -6.43372, -5.51459, -5.41145, -6.34373, -7.70095, -7.86045, -8.22675,3},
			{ - 5.60466, -5.17311, -4.04564, -3.51487, -4.42618, -5.7412, -5.94703, -6.44178,3},
			{ - 4.52213, -4.25419, -3.019, -2.24434, -2.67852, -3.9798, -4.28974, -5.09785,3},
			{ - 3.77975, -3.59497, -2.33055, -1.44787, -1.57374, -2.42982, -3.12381, -4.17725,3},
			{ - 3.29487, -3.23948, -1.95569, -1.01232, -0.944672, -1.54885, -2.41521, -3.59867,4},
			{ - 3.11622, -3.2727, -2.04035, -1.1077, -0.692879, -1.10761, -2.04016, -3.27244,4},
			{ - 3.29537, -3.59959, -2.41602, -1.54954, -0.944986, -1.01252, -1.95588, -3.23969,4},
			{ - 3.7816, -4.1812, -3.12763, -2.43314, -1.57528, -1.4489, -2.33163, -3.59619,5},
			{ - 4.53043, -5.11644, -4.30803, -3.996, -2.68595, -2.24922, -3.0238, -4.25935,5},
			{ - 5.64413, -6.53064, -6.03518, -5.81879, -4.46213, -3.53836, -4.06861, -5.19745,5},
			{ - 7.28037, -8.65282, -8.28581, -8.08085, -6.51747, -5.52514, -5.62551, -6.55086,5},
			{ - 9.93707, -12.2364, -12.4568, -12.1854, -9.36511, -8.0338, -8.01701, -8.70027,6}
		},
		{{ - 12.4262,
			 -11.2216,
			 -10.4991,
			 -10.4725,
			 -11.7749,
			 -14.6397,
			 -14.9159,
			 -14.6979,
			 3},
			 { - 9.81742, -9.08621, -8.18485, -8.01853, -8.9685, -10.5034, -10.7553, -11.1546,3},
			 { - 8.1893,
				 -7.71391,
				 -6.63213,
				 -6.15597,
				 -6.97581,
				 -8.29266,
				 -8.54615,
				 -9.08337,
				 3},
				 { - 7.04167, -6.73344, -5.53561, -4.8279, -5.30776, -6.52249, -6.88653, -7.66689,3},
				 { - 6.23261,
					 -6.01759,
					 -4.77519,
					 -3.93534,
					 -4.13645,
					 -5.04287,
					 -5.67738,
					 -6.67692,
					 3},
					 { - 5.65294, -5.49262, -4.23215, -3.34728, -3.37521, -4.04885, -4.85991, -5.9992,3},
					 { - 5.24599,
						 -5.21037,
						 -3.94276,
						 -3.01596,
						 -2.90076,
						 -3.4256,
						 -4.33044,
						 -5.52735,
						 4},
						 { - 5.0943, -5.23617, -4.00409, -3.08136, -2.7044, -3.08118, -4.00379, -5.23579,4},
						 { - 5.24675,
							 -5.52887,
							 -4.33154,
							 -3.42648,
							 -2.90125,
							 -3.01626,
							 -3.94305,
							 -5.21069,
							 4},
							 { - 5.6555, -6.00383, -4.8643, -4.05269, -3.37706, -3.34859, -4.23352, -5.4942,5},
							 { - 6.242,
								 -6.69747,
								 -5.69763,
								 -5.06084,
								 -4.1448,
								 -3.94085,
								 -4.7807,
								 -6.02379,
								 5},
								 { - 7.08501, -7.76391, -6.98282, -6.60873, -5.34747, -4.85383, -5.56097, -6.76034,5},
								 { - 8.39469,
									 -9.54121,
									 -9.00581,
									 -8.70676,
									 -7.16616,
									 -6.27964,
									 -6.75263,
									 -7.84113,
									 5},
									 { - 10.7458, -12.885, -13.0913, -12.8116, -9.91133, -8.60987, -8.76003, -9.69234,5}
		},
		{{ - 13.2793, -12.2223, -11.3031, -11.1139, -12.3949, -15.3176, -15.5996, -15.3957,3},
			{ - 10.9246, -10.3498, -9.29536, -8.85088, -9.67654, -11.1944, -11.5182, -12.0788,3},
			{ - 9.58734, -9.23252, -8.06638, -7.40864, -7.91996, -9.12494, -9.52998, -10.2949,3},
			{ - 8.69573, -8.45197, -7.22876, -6.43102, -6.6866, -7.62358, -8.22759, -9.18793,3},
			{ - 8.05317, -7.86017, -6.62073, -5.7638, -5.84111, -6.56264, -7.33141, -8.43217,3},
			{ - 7.55191, -7.4134, -6.15722, -5.27111, -5.26042, -5.83389, -6.70566, -7.87752,4},
			{ - 7.19423, -7.17213, -5.9148, -4.9986, -4.8541, -5.34852, -6.25719, -7.45476,4},
			{ - 7.05943, -7.19203, -5.96114, -5.04273, -4.69075, -5.04244, -5.9607, -7.19146,4},
			{ - 7.19533, -7.45691, -6.25896, -5.34973, -4.85482, -4.99904, -5.91521, -7.1726,4},
			{ - 7.55523, -7.88311, -6.71079, -5.83833, -5.26269, -5.27277, -6.15897, -7.41544,4},
			{ - 8.064, -8.455, -7.35382, -6.58259, -5.85051, -5.77013, -6.62737, -7.86752,5},
			{ - 8.74334, -9.29404, -8.33264, -7.71757, -6.73015, -6.45952, -7.25672, -8.4818,5},
			{ - 9.81185, -10.799, -10.0254, -9.57262, -8.12682, -7.54338, -8.19767, -9.37121,5},
			{ - 11.9197, -13.8348, -14.0199, -13.7262, -10.6933, -9.48407, -9.91134, -11.0004,5}
		},
		{{ - 14.446,
			 -13.509,
			 -12.4456,
			 -12.0352,
			 -13.215,
			 -16.2681,
			 -16.5642,
			 -16.3776,
			 3},
			 { - 12.3072, -11.8417, -10.6966, -10.0792, -10.6708, -12.0862, -12.5577, -13.3172,3},
			 { - 11.1975,
				 -10.9126,
				 -9.70792,
				 -8.94781,
				 -9.25477,
				 -10.2519,
				 -10.8475,
				 -11.7788,
				 3},
				 { - 10.4727, -10.2614, -9.03037, -8.19647, -8.31945, -9.08427, -9.82269, -10.8905,3},
				 { - 9.92029,
					 -9.73922,
					 -8.49966,
					 -7.64038,
					 -7.66429,
					 -8.27703,
					 -9.11938,
					 -10.2677,
					 3},
					 { - 9.463, -9.3417, -8.09001, -7.20433, -7.16952, -7.70104, -8.59346, -9.77682,4},
					 { - 9.13698,
						 -9.12494,
						 -7.87468,
						 -6.96533,
						 -6.80311,
						 -7.27558,
						 -8.18034,
						 -9.38058,
						 4},
						 { - 9.01551, -9.14148, -7.91265, -6.99825, -6.66122, -6.99783, -7.912, -9.14067,4},
						 { - 9.13855,
							 -9.38354,
							 -8.18283,
							 -7.2775,
							 -6.80418,
							 -6.96596,
							 -7.87528,
							 -9.12561,
							 4},
							 { - 9.46732, -9.78369, -8.5997, -7.70635, -7.17266, -7.20651, -8.09231, -9.34438,4},
							 { - 9.9329,
								 -10.2933,
								 -9.1443,
								 -8.29918,
								 -7.67501,
								 -7.648,
								 -8.50757,
								 -9.74799,
								 5},
								 { - 10.5253, -11.0067, -9.93765, -9.18692, -8.36725, -8.22794, -9.06145, -10.2947,5},
								 { - 11.443,
									 -12.3318,
									 -11.3934,
									 -10.7351,
									 -9.48002,
									 -9.09517,
									 -9.85163,
									 -11.0646,
									 5},
									 { - 13.3989, -15.1703, -15.3419, -15.027, -11.8022, -10.781, -11.3805, -12.5635,5}
		},
		{{ - 15.8867, -15.0317, -13.8737, -13.3031, -14.3331, -17.5442, -17.8576, -17.6836,3},
			{ - 13.8962, -13.4971, -12.304, -11.5795, -11.9917, -13.2553, -13.8975, -14.8089,3},
			{ - 12.9385, -12.6918, -11.4705, -10.6607, -10.8354, -11.6793, -12.4043, -13.4443,3},
			{ - 12.311, -12.1134, -10.883, -10.0354, -10.0907, -10.7455, -11.5641, -12.6897,3},
			{ - 11.8045, -11.6352, -10.3956, -9.53329, -9.53526, -10.0945, -10.9696, -12.1389,3},
			{ - 11.3772, -11.2699, -10.0221, -9.13727, -9.08116, -9.59524, -10.4941, -11.6789,4},
			{ - 11.075, -11.0707, -9.8257, -8.92118, -8.74678, -9.19835, -10.1025, -11.3052,4},
			{ - 10.9644, -11.0854, -9.85849, -8.94798, -8.62071, -8.94737, -9.85757, -11.0843,4},
			{ - 11.0771, -11.3092, -10.1059, -9.201, -8.74829, -8.92205, -9.82652, -11.0716,4},
			{ - 11.3833, -11.6894, -10.5022, -9.60194, -9.08543, -9.14031, -10.0252, -11.2736,4},
			{ - 11.8213, -12.1682, -10.9978, -10.1194, -9.54788, -9.54253, -10.4052, -11.6462,5},
			{ - 12.3693, -12.8158, -11.6899, -10.8581, -10.1434, -10.0705, -10.918, -12.1525,5},
			{ - 13.2047, -14.0398, -13.0018, -12.2123, -11.0818, -10.8218, -11.6278, -12.8581,5},
			{ - 15.0758, -16.7612, -16.9246, -16.5961, -13.2483, -12.3496, -13.0538, -14.2865,5}
		},
		{{ - 17.5192,
			 -16.7141,
			 -15.5006,
			 -14.8245,
			 -15.742,
			 -19.0682,
			 -19.3943,
			 -19.2286,
			 3},
			 { - 15.6195, -15.2581, -14.0407, -13.2575, -13.5472, -14.6966, -15.4622, -16.4738,3},
			 { - 14.7529,
				 -14.5251,
				 -13.2981,
				 -12.4652,
				 -12.5646,
				 -13.3048,
				 -14.1131,
				 -15.2168,
				 3},
				 { - 14.1781, -13.9875, -12.7567, -11.9069, -11.9289, -12.5226, -13.383, -14.538,3},
				 { - 13.6973,
					 -13.5388,
					 -12.2997,
					 -11.4354,
					 -11.4252,
					 -11.9582,
					 -12.8474,
					 -14.0246,
					 4},
					 { - 13.292, -13.1964, -11.9517, -11.0678, -10.9949, -11.498, -12.3956, -13.5824,4},
					 { - 13.0093,
						 -13.0112,
						 -11.7703,
						 -10.8694,
						 -10.6859,
						 -11.1208,
						 -12.0244,
						 -13.2285,
						 4},
						 { - 12.9075, -13.0248, -11.7994, -10.8921, -10.572, -10.8913, -11.7982, -13.0232,4},
						 { - 13.0122,
							 -13.2341,
							 -12.029,
							 -11.1244,
							 -10.688,
							 -10.8706,
							 -11.7714,
							 -13.0124,
							 4},
							 { - 13.3002, -13.5965, -12.4076, -11.5067, -11.0007, -11.072, -11.9561, -13.2014,4},
							 { - 13.7182,
								 -14.0587,
								 -12.8795,
								 -11.9865,
								 -11.4402,
								 -11.4467,
								 -12.3116,
								 -13.5524,
								 4},
								 { - 14.2433, -14.6735, -13.5193, -12.6457, -11.9872, -11.9462, -12.7979, -14.0326,5},
								 { - 15.0367,
									 -15.8447,
									 -14.7529,
									 -13.8852,
									 -12.8315,
									 -12.6389,
									 -13.468,
									 -14.7052,
									 5},
									 { - 16.8644, -18.5042, -18.6632, -18.3266, -14.9049, -14.0817, -14.8413, -16.0987,5}
		},
		{{ - 19.2706, -18.4934, -17.2496, -16.5116, -17.3541, -20.7553, -21.0896, -20.9288,3},
			{ - 17.4221, -17.0803, -15.8516, -15.0379, -15.2542, -16.3273, -17.1727, -18.2438,3},
			{ - 16.606, -16.3883, -15.1583, -14.3161, -14.375, -15.0538, -15.9097, -17.0482,3},
			{ - 16.0598, -15.8737, -14.6417, -13.7897, -13.798, -14.3595, -15.2408, -16.4097,3},
			{ - 15.5946, -15.4452, -14.207, -13.3414, -13.3192, -13.8414, -14.7356, -15.917,4},
			{ - 15.2065, -15.1207, -13.8788, -12.9957, -12.9092, -13.4002, -14.2979, -15.487,4},
			{ - 14.9405, -14.9474, -13.7097, -12.8117, -12.6212, -13.0428, -13.9454, -15.1505,4},
			{ - 14.846, -14.9603, -13.7364, -12.8316, -12.5168, -12.8304, -13.7347, -14.9583,4},
			{ - 14.9444, -15.1578, -13.9517, -13.0477, -12.624, -12.8133, -13.7112, -14.9491,4},
			{ - 15.2173, -15.505, -14.3139, -13.4132, -12.9172, -13.0013, -13.8847, -15.1275,4},
			{ - 15.62, -15.9563, -14.773, -13.8741, -13.3389, -13.3554, -14.2219, -15.4621,4},
			{ - 16.1318, -16.5541, -15.3867, -14.4927, -13.8623, -13.8353, -14.6887, -15.9247,5},
			{ - 16.9046, -17.6995, -16.5807, -15.6717, -14.6591, -14.5007, -15.3397, -16.5802,5},
			{ - 18.7112, -20.3283, -20.4852, -20.1443, -16.6834, -15.9006, -16.6878, -17.9568,5}
		},
		{{ - 21.0897,
			 -20.3272,
			 -19.0678,
			 -18.2959,
			 -19.0938,
			 -22.5389,
			 -22.8781,
			 -22.72,
			 3},
			 { - 19.2684, -18.9368, -17.7025, -16.874, -17.0493, -18.0771, -18.9691, -20.0731,3},
			 { - 18.4793,
				 -18.266,
				 -17.0356,
				 -16.1883,
				 -16.2275,
				 -16.8722,
				 -17.7539,
				 -18.9102,
				 3},
				 { - 17.9476, -17.7661, -16.5332, -15.6791, -15.6801, -16.2262, -17.1171, -18.293,3},
				 { - 17.4943,
					 -17.353,
					 -16.1156,
					 -15.2489,
					 -15.216,
					 -15.7319,
					 -16.6289,
					 -17.8115,
					 4},
					 { - 17.1208, -17.0434, -15.8037, -14.9214, -14.8236, -15.3035, -16.2017, -17.3929,4},
					 { - 16.8689,
						 -16.8801,
						 -15.645,
						 -14.7493,
						 -14.5532,
						 -14.9638,
						 -15.8654,
						 -17.0712,
						 4},
						 { - 16.7806, -16.8927, -15.67, -14.7673, -14.4566, -14.7657, -15.6677, -16.8901,4},
						 { - 16.874,
							 -17.0805,
							 -15.8737,
							 -14.9704,
							 -14.5569,
							 -14.7514,
							 -15.647,
							 -16.8823,
							 4},
							 { - 17.1345, -17.415, -16.2217, -15.3203, -14.8341, -14.9287, -15.8113, -17.052,4},
							 { - 17.5249,
								 -17.8583,
								 -16.6721,
								 -15.7702,
								 -15.2405,
								 -15.2664,
								 -16.1339,
								 -17.3736,
								 4},
								 { - 18.0282, -18.4462, -17.2723, -16.3688, -15.7514, -15.7307, -16.5862, -17.8235,5},
								 { - 18.7903,
									 -19.579,
									 -18.4471,
									 -17.5176,
									 -16.5256,
									 -16.3833,
									 -17.2271,
									 -18.4698,
									 5},
									 { - 20.5867, -22.193, -22.3489, -22.0058, -18.5253, -17.7628, -18.5631, -19.8378,5}
		},
		{{ - 22.9452, -22.1903, -20.9228, -20.1334, -20.9067, -24.3758, -24.7177, -24.561,3},
			{ - 21.1378, -20.8111, -19.5745, -18.7384, -18.8924, -19.8952, -20.8127, -21.9337,3},
			{ - 20.3623, -20.1512, -18.9203, -18.0717, -18.1004, -18.7276, -19.6224, -20.7879,3},
			{ - 19.8389, -19.662, -18.4288, -17.573, -17.5694, -18.107, -19.0029, -20.1817,4},
			{ - 19.3956, -19.2613, -18.0247, -17.1572, -17.1151, -17.6265, -18.5237, -19.7074,4},
			{ - 19.0348, -18.9646, -17.7269, -16.8452, -16.7379, -17.2082, -18.1068, -19.2996,4},
			{ - 18.7951, -18.8098, -17.577, -16.683, -16.4823, -16.8838, -17.7845, -18.9907,4},
			{ - 18.7121, -18.8225, -17.6008, -16.6999, -16.3924, -16.6977, -17.5978, -18.8191,4},
			{ - 18.8015, -19.0024, -17.7949, -16.8923, -16.4872, -16.6857, -17.5795, -18.8127,4},
			{ - 19.0517, -19.3263, -18.1312, -17.2291, -16.7511, -16.8544, -17.7364, -18.9753,4},
			{ - 19.4323, -19.7633, -18.575, -17.671, -17.1448, -17.1786, -18.047, -19.2863,4},
			{ - 19.9296, -20.3448, -19.1671, -18.2588, -17.6476, -17.6308, -18.4881, -19.7265,5},
			{ - 20.6856, -21.4707, -20.3324, -19.3929, -18.4107, -18.2761, -19.123, -20.3675,5},
			{ - 22.4765, -24.0773, -24.2326, -23.8885, -20.3987, -19.6458, -20.4525, -21.7305,5}
		},
		{{ - 24.8194,
			 -24.0682,
			 -22.7969,
			 -21.9985,
			 -22.759,
			 -26.2406,
			 -26.5838,
			 -26.4278,
			 3},
			 { - 23.019, -22.6949, -21.4568, -20.6174, -20.7603, -21.7502, -22.6807, -23.8106,3},
			 { - 22.2506,
				 -22.041,
				 -20.8092,
				 -19.9596,
				 -19.9838,
				 -20.6019,
				 -21.5033,
				 -22.6733,
				 3},
				 { - 21.7326, -21.56, -20.3265, -19.4695, -19.461, -19.995, -20.8928, -22.0735,4},
				 { - 21.2978,
					 -21.17,
					 -19.9341,
					 -19.0659,
					 -19.0158,
					 -19.5221,
					 -20.4196,
					 -21.6048,
					 4},
					 { - 20.9486, -20.8845, -19.6485, -18.7673, -18.652, -19.1141, -20.0127, -21.2068,4},
					 { - 20.7193,
						 -20.7372,
						 -19.5061,
						 -18.6136,
						 -18.4091,
						 -18.8028,
						 -19.7026,
						 -20.9093,
						 4},
						 { - 20.641, -20.75, -19.5292, -18.6297, -18.3247, -18.627, -19.5254, -20.7458,4},
						 { - 20.7273,
							 -20.9235,
							 -19.7155,
							 -18.8135,
							 -18.4153,
							 -18.617,
							 -19.5092,
							 -20.7407,
							 4},
							 { - 20.969, -21.2389, -20.0422, -19.1394, -18.6683, -18.7788, -19.6602, -20.8976,4},
							 { - 21.3416,
								 -21.6708,
								 -20.4808,
								 -19.5751,
								 -19.0516,
								 -19.092,
								 -19.961,
								 -21.2,
								 4},
								 { - 21.8344, -22.2476, -21.0674, -20.1562, -19.5486, -19.5344, -20.3932, -21.6326,5},
								 { - 22.5864,
									 -23.3693,
									 -22.2273,
									 -21.2828,
									 -20.3053,
									 -20.1751,
									 -21.0242,
									 -22.2701,
									 5},
									 { - 24.3739, -25.9715, -26.1265, -25.7818, -22.2874, -21.5392, -22.3496, -23.6298,5}
		},
		{{ - 26.7032, -25.954, -24.6805, -23.8778, -24.6317, -28.1196, -28.4636, -28.3079,3},
			{ - 24.9065, -24.584, -23.3447, -22.5033, -22.6411, -23.6242, -24.5615, -25.6958,3},
			{ - 24.1421, -23.9338, -22.7011, -21.8502, -21.8721, -22.4859, -23.3905, -24.563,3},
			{ - 23.6282, -23.4596, -22.2259, -21.3677, -21.3544, -21.8862, -22.7854, -23.9675,4},
			{ - 23.201, -23.0788, -21.8436, -20.9749, -20.9178, -21.4189, -22.3169, -23.5035,4},
			{ - 22.862, -22.8032, -21.5687, -20.688, -20.5657, -21.0206, -21.9192, -23.1144,4},
			{ - 22.6418, -22.6624, -21.4329, -20.5416, -20.3338, -20.7208, -21.6199, -22.8268,4},
			{ - 22.5676, -22.6756, -21.4555, -20.5574, -20.2543, -20.5539, -21.4509, -22.6705,4},
			{ - 22.6515, -22.844, -21.6356, -20.7341, -20.3415, -20.5457, -21.4367, -22.6667,4},
			{ - 22.8865, -23.1524, -21.9544, -21.051, -20.5856, -20.7019, -21.5829, -22.8191,4},
			{ - 23.2525, -23.5803, -22.3889, -21.4819, -20.9604, -21.0061, -21.8758, -23.1145,4},
			{ - 23.7417, -24.1535, -22.9714, -22.0583, -21.4529, -21.4406, -22.3007, -23.541,5},
			{ - 24.491, -25.2723, -24.1278, -23.1804, -22.2056, -22.0781, -22.9289, -24.1759,5},
			{ - 26.276, -27.8715, -28.0263, -27.6814, -24.1841, -23.4386, -24.2516, -25.5333,5}
		},
		{{ - 28.5922,
			 -27.8443,
			 -26.5693,
			 -25.7641,
			 -26.5148,
			 -30.0059,
			 -30.3502,
			 -30.1948,
			 3},
			 { - 26.7978, -26.4764, -25.2362, -24.3933, -24.5282, -25.5081, -26.4488, -27.5855,3},
			 { - 26.0361,
				 -25.8287,
				 -24.5952,
				 -23.7432,
				 -23.7634,
				 -24.3749,
				 -25.2815,
				 -26.4556,
				 3},
				 { - 25.5255, -25.3603, -24.1265, -23.2674, -23.2497, -23.7797, -24.6801, -25.8634,4},
				 { - 25.1049,
					 -24.9878,
					 -23.7533,
					 -22.8842,
					 -22.8207,
					 -23.317,
					 -24.2157,
					 -25.4035,
					 4},
					 { - 24.7751, -24.721, -23.4877, -22.6075, -22.4792, -22.9276, -23.8262, -25.0223,4},
					 { - 24.5629,
						 -24.586,
						 -23.3577,
						 -22.4675,
						 -22.2568,
						 -22.6381,
						 -23.5364,
						 -24.7436,
						 4},
						 { - 24.4924, -24.5997, -23.3803, -22.4831, -22.1815, -22.4788, -23.3746, -24.5936,4},
						 { - 24.5745,
							 -24.764,
							 -23.5552,
							 -22.6541,
							 -22.2662,
							 -22.4724,
							 -23.3622,
							 -24.5911,
							 4},
							 { - 24.804, -25.0667, -23.8677, -22.9638, -22.503, -22.6242, -23.5048, -24.7399,4},
							 { - 25.1647,
								 -25.4913,
								 -24.2989,
								 -23.3908,
								 -22.8708,
								 -22.921,
								 -23.7911,
								 -25.0296,
								 4},
								 { - 25.6511, -26.0617, -24.8782, -23.9636, -23.3599, -23.3491, -24.2102, -25.4512,5},
								 { - 26.3983,
									 -27.1784,
									 -26.0321,
									 -25.0827,
									 -24.1097,
									 -23.9841,
									 -24.8363,
									 -26.0842,
									 5},
									 { - 28.1815, -29.7754, -29.9301, -29.5849, -26.0859, -25.3421, -26.1568, -27.4398,5}
		},
		{{ - 30.4845, -29.7375, -28.4613, -27.6544, -28.4033, -31.8963, -32.2409, -32.0855,3},
			{ - 28.6918, -28.3714, -27.1302, -26.286, -26.4191, -27.3972, -28.3399, -29.4784,3},
			{ - 27.9322, -27.7256, -26.4913, -25.6383, -25.657, -26.2671, -27.175, -28.3506,3},
			{ - 27.4243, -27.2623, -26.0283, -25.1683, -25.1466, -25.6753, -26.5766, -27.761,4},
			{ - 27.0097, -26.8971, -25.6631, -24.7936, -24.7244, -25.2165, -26.1157, -27.3047,4},
			{ - 26.6879, -26.638, -25.4058, -24.5258, -24.3924, -24.8351, -25.7336, -26.9306,4},
			{ - 26.4829, -26.5081, -25.2809, -24.3915, -24.1782, -24.5546, -25.4522, -26.6597,4},
			{ - 26.4158, -26.5226, -25.3036, -24.4072, -24.1068, -24.402, -25.2968, -26.5153,4},
			{ - 26.4966, -26.6836, -25.4745, -24.5737, -24.1895, -24.3973, -25.2862, -26.5142,4},
			{ - 26.7217, -26.9818, -25.7819, -24.8776, -24.4205, -24.5456, -25.4258, -26.6602,4},
			{ - 27.0781, -27.4037, -26.2104, -25.3014, -24.7827, -24.8364, -25.707, -26.9453,4},
			{ - 27.5623, -27.9719, -26.7872, -25.8715, -25.269, -25.2594, -26.1214, -27.363,5},
			{ - 28.3078, -29.0868, -27.9392, -26.9883, -26.0166, -25.8924, -26.7457, -27.9944,5},
			{ - 30.0895, -31.6821, -31.8367, -31.4914, -27.991, -27.2485, -28.0646, -29.3486,5}
		},
		{{ - 32.3796,
			 -31.6334,
			 -30.3559,
			 -29.5476,
			 -30.2954,
			 -33.7897,
			 -34.1343,
			 -33.9791,
			 3},
			 { - 30.5884, -30.2688, -29.0264, -28.1811, -28.3128, -29.2898, -30.2339, -31.374,3},
			 { - 29.8305,
				 -29.6246,
				 -28.3893,
				 -27.5352,
				 -27.5528,
				 -28.1617,
				 -29.0708,
				 -30.2479,
				 3},
				 { - 29.3251, -29.1657, -27.9312, -27.0704, -27.0451, -27.5726, -28.475, -29.6607,4},
				 { - 28.9157,
					 -28.807,
					 -27.5732,
					 -26.7033,
					 -26.6291,
					 -27.1174,
					 -28.0171,
					 -29.2075,
					 4},
					 { - 28.6011, -28.5548, -27.3231, -26.4434, -26.3053, -26.743, -27.6416, -28.8397,4},
					 { - 28.4023,
						 -28.4295,
						 -27.2028,
						 -26.314,
						 -26.0986,
						 -26.4705,
						 -27.3677,
						 -28.5757,
						 4},
						 { - 28.3383, -28.4448, -27.226, -26.3302, -26.0306, -26.3239, -27.218, -28.4364,4},
						 { - 28.4183,
							 -28.6034,
							 -27.3938,
							 -26.4931,
							 -26.1119,
							 -26.3209,
							 -27.2091,
							 -28.4366,
							 4},
							 { - 28.6399, -28.898, -27.6969, -26.7922, -26.3382, -26.4664, -27.3465, -28.5805,4},
							 { - 28.9929,
								 -29.3178,
								 -28.1233,
								 -27.2136,
								 -26.6958,
								 -26.7525,
								 -27.6235,
								 -28.8619,
								 4},
								 { - 29.4753, -29.8841, -28.6982, -27.7814, -27.1799, -27.1712, -28.034, -29.2765,5},
								 { - 30.2194,
									 -30.9976,
									 -29.8486,
									 -28.8965,
									 -27.9257,
									 -27.8027,
									 -28.657,
									 -29.9066,
									 5},
									 { - 31.9998, -33.5912, -33.7457, -33.4003, -29.8988, -29.1572, -29.9745, -31.2596,5}
		},
		{{ - 34.2787, -33.5336, -32.2535, -31.4436, -32.1904, -35.686, -36.0308, -35.8758,3},
			{ - 32.4895, -32.1706, -30.9255, -30.0787, -30.2093, -31.1853, -32.131, -33.2737,3},
			{ - 31.7333, -31.5277, -30.2899, -29.4345, -29.4511, -30.0591, -30.9696, -32.1495,3},
			{ - 31.2299, -31.0727, -29.8363, -28.9743, -28.9458, -29.4723, -30.3759, -31.5645,4},
			{ - 30.8251, -30.7197, -29.4845, -28.6138, -28.5352, -29.0201, -29.9208, -31.114,4},
			{ - 30.5167, -30.4736, -29.2409, -28.3608, -28.2187, -28.652, -29.551, -30.7516,4},
			{ - 30.3236, -30.3524, -29.1248, -28.236, -28.0185, -28.3866, -29.2838, -30.4938,4},
			{ - 30.2625, -30.3687, -29.1485, -28.2528, -27.9537, -28.2453, -29.1391, -30.359,4},
			{ - 30.342, -30.5255, -29.3138, -28.4129, -28.0341, -28.244, -29.132, -30.3606,4},
			{ - 30.5609, -30.8172, -29.6137, -28.7082, -28.2567, -28.3874, -29.2677, -30.503,4},
			{ - 30.9112, -31.2354, -30.0385, -29.1276, -28.6106, -28.6696, -29.5414, -30.7816,4},
			{ - 31.3922, -31.8002, -30.6117, -29.6937, -29.0929, -29.085, -29.9489, -31.1936,5},
			{ - 32.1351, -32.9121, -31.7607, -30.8073, -29.8373, -29.7152, -30.5707, -31.8228,5},
			{ - 33.9139, -35.503, -35.6572, -35.3117, -31.8091, -31.0683, -31.887, -33.1746,5}
		},
		{{ - 36.1905,
			 -35.4481,
			 -34.1579,
			 -33.3442,
			 -34.0902,
			 -37.5881,
			 -37.9331,
			 -37.779,
			 3},
			 { - 34.4063, -34.0876, -32.8322, -31.9816, -32.111, -33.0864, -34.0351, -35.1867,3},
			 { - 33.6521,
				 -33.4456,
				 -32.1979,
				 -31.339,
				 -31.3545,
				 -31.9619,
				 -32.876,
				 -34.0663,
				 3},
				 { - 33.15, -32.9938, -31.7481, -30.8828, -30.8513, -31.3771, -32.2844, -33.4834,4},
				 { - 32.7489,
					 -32.6456,
					 -31.4017,
					 -30.5282,
					 -30.4454,
					 -30.9275,
					 -31.8314,
					 -33.0347,
					 4},
					 { - 32.446, -32.4048, -31.1639, -30.2813, -30.1355, -30.5649, -31.4666, -32.6769,4},
					 { - 32.2579,
						 -32.2875,
						 -31.0515,
						 -30.1606,
						 -29.941,
						 -30.3059,
						 -31.2053,
						 -32.4245,
						 4},
						 { - 32.1995, -32.3049, -31.0759, -30.1781, -29.8792, -30.1694, -31.0651, -32.2937,4},
						 { - 32.2789,
							 -32.4603,
							 -31.2395,
							 -30.3361,
							 -29.959,
							 -30.1696,
							 -31.0598,
							 -32.2968,
							 4},
							 { - 32.4958, -32.75, -31.5369, -30.6284, -30.1787, -30.3116, -31.1944, -32.4381,4},
							 { - 32.8442,
								 -33.1676,
								 -31.9605,
								 -31.0463,
								 -30.5298,
								 -30.5909,
								 -31.4655,
								 -32.7146,
								 4},
								 { - 33.3247, -33.7309, -32.5323, -31.611, -31.0107, -31.0036, -31.8707, -33.1249,5},
								 { - 34.0659,
									 -34.8394,
									 -33.6794,
									 -32.7232,
									 -31.7536,
									 -31.6325,
									 -32.4915,
									 -33.7537,
									 5},
									 { - 35.84, -37.4208, -37.5743, -37.2285, -33.7238, -32.9838, -33.8059, -35.1032,5}
		},
		{{ - 38.1607, -37.4282, -36.0902, -35.2616, -36.0063, -39.5124, -39.8582, -39.7081,3},
			{ - 36.3958, -36.0737, -34.7701, -33.9045, -34.032, -35.007, -35.968, -37.1614,3},
			{ - 35.6442, -35.4315, -34.1371, -33.2639, -33.2779, -33.8855, -34.8143, -36.0535,3},
			{ - 35.1412, -34.9815, -33.6903, -32.811, -32.7762, -33.3023, -34.2244, -35.4715,4},
			{ - 34.7425, -34.6372, -33.3483, -32.4612, -32.3741, -32.8545, -33.7723, -35.0222,4},
			{ - 34.4441, -34.4009, -33.1154, -32.2197, -32.0698, -32.4966, -33.4116, -34.6679,4},
			{ - 34.2602, -34.2869, -33.0064, -32.1026, -31.8804, -32.2431, -33.1555, -34.4201,4},
			{ - 34.2042, -34.3054, -33.0317, -32.1209, -31.8214, -32.1109, -33.0194, -34.2929,4},
			{ - 34.2838, -34.46, -33.194, -32.2774, -31.9009, -32.1128, -33.0157, -34.2974,4},
			{ - 34.4993, -34.7485, -33.4897, -32.5676, -32.1185, -32.2538, -33.1496, -34.4381,4},
			{ - 34.8471, -35.1677, -33.9134, -32.9847, -32.4676, -32.5311, -33.4191, -34.7133,4},
			{ - 35.3291, -35.7308, -34.4841, -33.5484, -32.9477, -32.942, -33.8229, -35.123,5},
			{ - 36.0682, -36.8274, -35.6262, -34.658, -33.6887, -33.5693, -34.4429, -35.7524,5},
			{ - 37.8237, -39.364, -39.5135, -39.1669, -35.6543, -34.9153, -35.752, -37.0963,5}
		},
		{{ - 40.4591,
			 -39.7194,
			 -38.1574,
			 -37.2588,
			 -37.9999,
			 -41.5457,
			 -41.8956,
			 -41.7692,
			 3},
			 { - 38.7298, -38.3925, -36.8588, -35.9232, -36.0447, -37.0208, -38.0453, -39.4799,3},
			 { - 37.9859,
				 -37.7472,
				 -36.2243,
				 -35.2833,
				 -35.2927,
				 -35.904,
				 -36.9024,
				 -38.3655,
				 3},
				 { - 37.4801, -37.2983, -35.7798, -34.8332, -34.7921, -35.3227, -36.3147, -37.7922,4},
				 { - 37.0819,
					 -36.9559,
					 -35.4409,
					 -34.4869,
					 -34.3924,
					 -34.8751,
					 -35.8606,
					 -37.3386,
					 4},
					 { - 36.7865, -36.7227, -35.2119, -34.2499, -34.0927, -34.521, -35.5028, -36.9865,4},
					 { - 36.6056,
						 -36.6111,
						 -35.1057,
						 -34.1359,
						 -33.9077,
						 -34.2722,
						 -35.2508,
						 -36.7419,
						 4},
						 { - 36.5513, -36.6305, -35.1318, -34.1551, -33.8511, -34.1437, -35.1181, -36.6171,4},
						 { - 36.631,
							 -36.7848,
							 -35.2934,
							 -34.3105,
							 -33.9307,
							 -34.1472,
							 -35.116,
							 -36.6226,
							 4},
							 { - 36.8459, -37.0728, -35.5881, -34.5992, -34.1467, -34.2877, -35.2495, -36.763,4},
							 { - 37.1936,
								 -37.4936,
								 -36.014,
								 -35.0167,
								 -34.4949,
								 -34.5637,
								 -35.5182,
								 -37.0378,
								 4},
								 { - 37.6762, -38.0522, -36.5836, -35.5792, -34.9746, -34.9731, -35.9208, -37.4469,5},
								 { - 38.4117,
									 -39.1565,
									 -37.7157,
									 -36.6846,
									 -35.7141,
									 -35.6003,
									 -36.5425,
									 -38.0771,
									 5},
									 { - 40.1332, -41.4379, -41.5637, -41.2132, -37.6614, -36.9258, -37.8315, -39.3983,5}
		},
		{{ - 44.6213, -44.3036, -41.0246, -39.7324, -40.4648, -44.2476, -44.6213, -44.6213,3},
			{ - 42.8729, -42.5918, -39.6772, -38.3785, -38.476, -39.4652, -40.7646, -42.6906,3},
			{ - 42.1894, -41.9143, -39.0618, -37.7663, -37.7551, -38.3881, -39.6802, -41.9705,4},
			{ - 41.6865, -41.4166, -38.6148, -37.3193, -37.2548, -37.8097, -39.1088, -41.4615,4},
			{ - 41.2882, -41.0234, -38.2723, -36.9755, -36.8563, -37.3599, -38.655, -41.0581,4},
			{ - 40.9923, -40.7332, -38.0393, -36.7411, -36.5594, -37.0074, -38.3031, -40.7572,4},
			{ - 40.8109, -40.5582, -37.9278, -36.6288, -36.3771, -36.7615, -38.0586, -40.57,4},
			{ - 40.7564, -40.5104, -37.9473, -36.6482, -36.322, -36.6355, -37.9339, -40.5091,4},
			{ - 40.8361, -40.5968, -38.1017, -36.8029, -36.4017, -36.6404, -37.9394, -40.5821,4},
			{ - 41.0511, -40.8185, -38.3897, -37.091, -36.617, -36.7808, -38.0799, -40.7903,4},
			{ - 41.399, -41.173, -38.8106, -37.5107, -36.9649, -37.0561, -38.3548, -41.1316,4},
			{ - 41.8808, -41.6617, -39.3687, -38.0724, -37.4459, -37.4647, -38.7634, -41.6067,4},
			{ - 42.5578, -42.375, -40.4438, -39.1394, -38.1554, -38.0648, -39.3645, -42.2768,5},
			{ - 44.2983, -44.2983, -44.2983, -43.9241, -40.1367, -39.4094, -40.7062, -43.981,5}
		}
	};
}





/////////////////////////////////////////////////////////////
// Set values and action
/////////////////////////////////////////////////////////////

//--- init variables ----------------------
void newobstacleChallenge::initNewObsChallenge() {
	newobsChallengeInitWorldMap();
	newobsChallengeQueueClear();

	//currentState           = STATE_GENERATE_Q;
	currentState = STATE_GOTO_TARGET;
	currentSubState = ACTION_DECIDE;
	currentDirection = DIRECTION_FORWARD;

	lastPanX = 0;
	lastTiltY = 0;
	panDirection = 1;

	reachGoalCount = 0;
	debugCount = 0;
	actLocaliseCount = 0;

	doGenerate = true;
	fullSpeed = false;
	stopLook = false;

	localisedX = 0;
	localisedY = 0;
	localiseCount = 0;

	leftRobotHead = 90;
	rightRobotHead = -90;
	leftSideRobotHead = 0;
	rightSideRobotHead = 0;
	leftReached = false;
	rightReached = false;

	infraRedTracking = false;
	infraRedTrackingCount = 0;
	infraRedTrackingHead = 0;
	infraRedTrackingFound = false;
	infraRedTrackingTilt = 0;
	infraRedTrackingPan = 0;

	robotTracking = false;
	robotTrackingCount = 0;
	robotTrackingHead = 0;
	robotTrackingFound = false;

	lastPanDirection = 1;

	walkH = 0;
	walkCount = 0;
	uTurnH = 90;

	myX = -1;
	myY = -1;
}



//--- entry for each frame ----------------
void newobstacleChallenge::doNewObsChallenge() {
	if (mode_ == mStartMatch) {
		newobsChallengeStationary();
	}
	else {
		setDefaultParams();
		setWalkParams();
		setNewObsChallengeValues();
		decideNewObsChallengeNextAction();
	}
}



//--- change variables --------------------
void newobstacleChallenge::setNewObsChallengeValues() {
	newobsChallengeUpdateWorldMap();
	newobsChallengeUpdateActionGrid();
	newobsChallengeLookAroundHeadParams();
	newobsChallengeUpdateDebugCount();
	newobsChallengeUpdatePosition();
	newobsChallengeUpdateActLocaliseCount();
}



//--- choose an action to take ------------
void newobstacleChallenge::decideNewObsChallengeNextAction() {
	if (lockMode != NoMode && lockMode != ResetMode) {
		switch (lockMode) {
			case ChestPush: aaChestPush();
					break;
			case SpinKick: aaSpinKick();
				       break;
			case SpinChestPush: aaSpinChestPush();
					    break;
			case GoalieKick: aaGoalieKick();
					 break;
			case LightningKick: aaLightningKick();
					    break;
		}
	}
	else {
		switch (currentState) {
			case STATE_GENERATE_Q: newobsChallengeGenerateActionGrid();
					       break;
			case STATE_GOTO_TARGET: newobsChallengeWalkParams();
						break;
			case STATE_U_TURN: newobsChallengeUTurn();
					   break;
			case STATE_GOAL: newobsChallengeGoal();
					 break;
			default: newobsChallengeWalkParams();
				 break;
		}
	}
}





/////////////////////////////////////////////////////////////
// Head and walk parameters
/////////////////////////////////////////////////////////////

//--- stationary -------------------------------------------
void newobstacleChallenge::newobsChallengeStationary() {
	setDefaultParams();
	setStandParams();
	setNewObsChallengeValues();

	//=============================================
	// DEBUG
	//=============================================
	if (debugCount % 125 == 0) {
		newobsChallengePrintActionGrid();
	}
}



//--- change walk params -----------------------------------
void newobstacleChallenge::newobsChallengeWalkParams() {
	//== ACTION: decide next direction ==================
	if (currentSubState == ACTION_DECIDE) {
		int selfR = CLIP((int) (myY / GRID_SIZE), NUM_ROWS - 1);
		int selfC = CLIP((int) (myX / GRID_SIZE), NUM_COLS - 1);


		//-- determine closest four points --------------
		double arrayCentrePtsX[4];
		double arrayCentrePtsY[4];
		if (myY > (selfR * GRID_SIZE + GRID_SIZE / 2)) {
			//-- top right quad -----------------------
			if (myX > (selfC * GRID_SIZE + GRID_SIZE / 2)) {
				//top left
				arrayCentrePtsX[0] = (selfC) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[0] = (selfR + 1) * GRID_SIZE + GRID_SIZE / 2;

				//top right
				arrayCentrePtsX[1] = (selfC + 1) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[1] = (selfR + 1) * GRID_SIZE + GRID_SIZE / 2;

				//bottom right
				arrayCentrePtsX[2] = (selfC + 1) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[2] = (selfR) * GRID_SIZE + GRID_SIZE / 2;

				//bottom left
				arrayCentrePtsX[3] = (selfC) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[3] = (selfR) * GRID_SIZE + GRID_SIZE / 2;

				//-- top left quad ------------------------
			}
			else {
				//top left
				arrayCentrePtsX[0] = (selfC - 1) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[0] = (selfR + 1) * GRID_SIZE + GRID_SIZE / 2;

				//top right
				arrayCentrePtsX[1] = (selfC) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[1] = (selfR + 1) * GRID_SIZE + GRID_SIZE / 2;

				//bottom right
				arrayCentrePtsX[2] = (selfC) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[2] = (selfR) * GRID_SIZE + GRID_SIZE / 2;

				//bottom left
				arrayCentrePtsX[3] = (selfC - 1) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[3] = (selfR) * GRID_SIZE + GRID_SIZE / 2;
			}
		}
		else {
			//-- bottom right quad --------------------
			if (myX > (selfC * GRID_SIZE + GRID_SIZE / 2)) {
				//top left
				arrayCentrePtsX[0] = (selfC) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[0] = (selfR) * GRID_SIZE + GRID_SIZE / 2;

				//top right
				arrayCentrePtsX[1] = (selfC + 1) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[1] = (selfR) * GRID_SIZE + GRID_SIZE / 2;

				//bottom right
				arrayCentrePtsX[2] = (selfC + 1) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[2] = (selfR - 1) * GRID_SIZE + GRID_SIZE / 2;

				//bottom left
				arrayCentrePtsX[3] = (selfC) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[3] = (selfR - 1) * GRID_SIZE + GRID_SIZE / 2;

				//-- bottom left quad ---------------------
			}
			else {
				//top left
				arrayCentrePtsX[0] = (selfC - 1) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[0] = (selfR) * GRID_SIZE + GRID_SIZE / 2;

				//top right
				arrayCentrePtsX[1] = (selfC) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[1] = (selfR) * GRID_SIZE + GRID_SIZE / 2;

				//bottom right
				arrayCentrePtsX[2] = (selfC) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[2] = (selfR - 1) * GRID_SIZE + GRID_SIZE / 2;

				//bottom left
				arrayCentrePtsX[3] = (selfC - 1) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[3] = (selfR - 1) * GRID_SIZE + GRID_SIZE / 2;
			}
		}


		//-- clean up edges -------------------------------
		for (int i = 0; i < 4; i++) {
			if (arrayCentrePtsX[i] < 0
					|| arrayCentrePtsX[i] >= FIELD_WIDTH
					|| arrayCentrePtsY[i] < 0
					|| arrayCentrePtsY[i] >= FIELD_LENGTH) {
				arrayCentrePtsX[i] = (selfC) * GRID_SIZE + GRID_SIZE / 2;
				arrayCentrePtsY[i] = (selfR) * GRID_SIZE + GRID_SIZE / 2;
			}
		}


		//-- vector addition ------------------------------
		double totX = 0;
		double totY = 0;
		for (int i = 0; i < 4; i++) {
			if (arrayCentrePtsX[i] > 0
					&& arrayCentrePtsX[i] < FIELD_WIDTH
					&& arrayCentrePtsY[i] > 0
					&& arrayCentrePtsY[i] < FIELD_LENGTH) {
				int gridC = (int) arrayCentrePtsX[i] / GRID_SIZE;
				int gridR = (int) arrayCentrePtsY[i] / GRID_SIZE;

				int gridAction = (int) qGridForward[gridR][gridC][NUM_ACTIONS];
				if (currentDirection == DIRECTION_BACKWARD) {
					gridAction = (int) qGridBackward[gridR][gridC][NUM_ACTIONS];
				}

				double dist = DISTANCE(arrayCentrePtsX[i],
						arrayCentrePtsY[i],
						myX,
						myY);
				double weight = (sqrt(SQUARE(GRID_SIZE) * 2.0) - dist)
					/ sqrt(SQUARE(GRID_SIZE) * 2.0);
				double targetH = 0;

				if (gridAction == 0) {
					//-- forward
					targetH = RAD2DEG(atan2(100.0, 0.0));
				}
				else if (gridAction == 1) {
					//-- forward right
					targetH = RAD2DEG(atan2(100.0, 100.0));
				}
				else if (gridAction == 2) {
					//-- right
					targetH = RAD2DEG(atan2(0.0, 100.0));
				}
				else if (gridAction == 3) {
					//-- backward right
					targetH = RAD2DEG(atan2(-100.0, 100.0));
				}
				else if (gridAction == 4) {
					//-- backward
					targetH = RAD2DEG(atan2(-100.0, 0.0));
				}
				else if (gridAction == 5) {
					//-- backward left
					targetH = RAD2DEG(atan2(-100.0, -100.0));
				}
				else if (gridAction == 6) {
					//-- left
					targetH = RAD2DEG(atan2(0.0, -100.0));
				}
				else if (gridAction == 7) {
					//-- forward left
					targetH = RAD2DEG(atan2(100.0, -100.0));
				}

				Vector totV(vCART, totX, totY);
				Vector newV(vPOLAR, weight, targetH);
				totV.add(newV);
				totX = totV.getX();
				totY = totV.getY();
			}
		}


		//-- set walk params ------------------------------
		double targetH = RAD2DEG(atan2(totY, totX));
		double vecMag = DISTANCE(0, 0, totX, totY);
		double relh = NormalizeAngle_180(targetH - (gps->self().h));
		turnCCW = CLIP(relh, MAX_TURN);
		forward = 0;
		left = 0;           


		//-- speed ----------------------------------------
		walkH = NormalizeAngle_0_360((NormalizeAngle_180(targetH - gps->self().h)
					/ 2)
				+ gps->self().h);
		double diffH = NormalizeAngle_180(targetH - walkH);
		if (ABS(diffH) > 45) {
			if (diffH > 0)
				walkH = NormalizeAngle_0_360(diffH - 45 + walkH);
			else
				walkH = NormalizeAngle_0_360(diffH + 45 + walkH);
		} 
		newobsChallengeDetermineSpeed(selfR, selfC, walkH);


		//-- change state ---------------------------------
		currentSubState = ACTION_ROTATE;
	}


	//== ACTION: rotate to face heading ===================
	else if (currentSubState == ACTION_ROTATE) {
		//-- set walk params ----------------------------
		double relh = NormalizeAngle_180(walkH - (gps->self().h));
		turnCCW = CLIP(relh, MAX_TURN);
		forward = 0;
		left = 0;

		//-- change state -------------------------------
		if (ABS(NormalizeAngle_180(gps->self().h - walkH)) < 10) {
			if (!stopLook) {
				walkCount = 0;
				currentSubState = ACTION_WALK;
			}
			else {
				//Version: Fast
				leftRobotHead = 90;
				rightRobotHead = -90;
				leftSideRobotHead = 0;
				rightSideRobotHead = 0;
				leftReached = false;
				rightReached = false;
				currentSubState = ACTION_SCAN_GAP;

				//Version: Slow
				//localiseCount   = 0;
				//currentSubState = ACTION_LOCALISE;
			}
		}
	}


	//== ACTION: localise =================================
	else if (currentSubState == ACTION_LOCALISE) {
		//-- stand --------------------------------------
		setStandParams();
		forward = 0;
		left = 0;
		turnCCW = 0;

		//-- localise -----------------------------------
		if (localiseCount == 0) {
			setNewBeacons(LARGE_VAL, 60);
			activeGpsLocalise(true);
			lastPanX = panx;
		}
		else {
			activeGpsLocalise(true);
			lastPanX = panx;
		}

		//-- time out -----------------------------------
		if (localiseCount > LOCALISE_TIME) {
			localisedX = gps->self().pos.x;
			localisedY = gps->self().pos.y;
			myX = localisedX;
			myY = localisedY;
			leftRobotHead = 90;
			rightRobotHead = -90;
			leftSideRobotHead = 0;
			rightSideRobotHead = 0;
			leftReached = false;
			rightReached = false;
			currentSubState = ACTION_SCAN_GAP;
		}

		//-- increase time ------------------------------
		localiseCount++;
	}


	//== ACTION: look at gap ==============================
	else if (currentSubState == ACTION_SCAN_GAP) {
		//-- stand --------------------------------------
		setStandParams();
		forward = 0;
		left = 0;
		turnCCW = 0;

		//-- vision robot tracking ----------------------
		/* Version: Slow
		   if (robotTracking) {
		   double dist = newobsChallengeVisionRobotDist(robotTrackingHead,10.0);
		   if (dist != -1 || robotTrackingCount > 15) {
		//-- plot long term obstacles -----------
		if (dist != -1) {

		int    selfR = CLIP((int)localisedY/GRID_SIZE, NUM_ROWS-1);
		int    selfC = CLIP((int)localisedX/GRID_SIZE, NUM_COLS-1);

		for (int i=vobRedDog; i<=vobBlueDog4; i++) {
		if (vision->vob[i].cf > 0 && vision->vob[i].var < get95CF(150) &&
		vision->vob[i].d <= dist) {

		//estimate obstacle position
		double deltax = vision->vob[i].d*cos(DEG2RAD(vision->vob[i].head + 
		gps->self().h));
		double deltay = vision->vob[i].d*sin(DEG2RAD(vision->vob[i].head + 
		gps->self().h));
		double obsx = localisedX + deltax;
		double obsy = localisedY + deltay;
		int    obsr = CLIP((int)obsy/GRID_SIZE, NUM_ROWS-1);
		if (obsr < 0) obsr = 0;
		int    obsc = CLIP((int)obsx/GRID_SIZE, NUM_COLS-1);
		if (obsc < 0) obsc = 0;
		wMap[obsr][obsc] = MEMORY_LONG;

		//add neighbours to queue for update
		for (int y=obsr-1; y<=obsr+1; y++) {
		for (int x=obsc-1; x<=obsc+1; x++) {
		if (y==obsr && x==obsc)
		continue;
		if (y<0 || y>=NUM_ROWS || x<0 || x>=NUM_COLS)
		continue;
		newobsChallengeQueueAdd(y,x);
		}
		}
		}
		}
		}
		robotTrackingFound = false;
		robotTracking      = false;
		robotTrackingCount = 0;
		robotTrackingHead  = 0;
		panDirection       = lastPanDirection;
		}
		}
		*/


		//-- record robot headings ----------------------
		for (int i = vobRedDog; i <= vobBlueDog4; i++) {
			if (vision->vob[i].cf > 0
					&& vision->vob[i].var < get95CF(150)
					&& vision->vob[i].d < VISION_OBS) {
				if (vision->vob[i].head > 0) {
					if (vision->vob[i].head > leftSideRobotHead)
						leftSideRobotHead = vision->vob[i].head;
					if (vision->vob[i].head < leftRobotHead) {
						leftRobotHead = vision->vob[i].head;
						/* Versino: Slow
						   if (!robotTracking) {
						   robotTrackingFound = false;
						   robotTracking      = true;
						   robotTrackingCount = 0;
						   robotTrackingHead  = vision->vob[i].head;
						   lastPanDirection   = panDirection;
						   }
						   */
					}
				}
				else {
					if (vision->vob[i].head < rightSideRobotHead)
						rightSideRobotHead = vision->vob[i].head;
					if (vision->vob[i].head > rightRobotHead) {
						rightRobotHead = vision->vob[i].head;
						/* Version: Slow
						   if (!robotTracking) {
						   robotTrackingFound = false;
						   robotTracking      = true;
						   robotTrackingCount = 0;
						   robotTrackingHead  = vision->vob[i].head;
						   lastPanDirection   = panDirection;
						   }
						   */
					}
				}
			}
		}

		//-- check scan extremes ------------------------
		if (lastPanX > SCAN_DEGREE)
			leftReached = true;
		if (lastPanX < (SCAN_DEGREE * -1))
			rightReached = true;

		//-- done scan ----------------------------------
		if (leftReached && rightReached) {
			if (leftRobotHead > GAP_DEGREE && rightRobotHead < (GAP_DEGREE * -1)) {
				walkCount = 0;
				currentSubState = ACTION_WALK;
			}
			else if (ABS(leftRobotHead) < OBS_DEGREE
					&& ABS(rightRobotHead) < OBS_DEGREE) {
				if (ABS(leftSideRobotHead) < ABS(rightSideRobotHead))
					walkH = NormalizeAngle_0_360(gps->self().h + 90); //turn left
				else
					walkH = NormalizeAngle_0_360(gps->self().h - 90); //turn right

				if (ONE_WAY && newobsChallengeNearOwnGoal()) {
					if (NormalizeAngle_180(walkH) < -90) {
						if (gps->self().pos.y < 30)
							walkH = 30;
						else
							walkH = 10;
					}
					else if (NormalizeAngle_180(walkH) > 90) {
						if (gps->self().pos.y < 30)
							walkH = 150;
						else
							walkH = 170;
					}
				}

				currentSubState = ACTION_ADJUST;
			}
			else {
				if (leftRobotHead > GAP_DEGREE)
					leftRobotHead = GAP_DEGREE;
				if (rightRobotHead < (GAP_DEGREE * -1))
					rightRobotHead = GAP_DEGREE * -1;

				double diffH = (leftRobotHead + rightRobotHead) / 2;
				walkH = NormalizeAngle_0_360(gps->self().h + diffH);

				if (ONE_WAY && newobsChallengeNearOwnGoal()) {
					if (NormalizeAngle_180(walkH) < -90) {
						if (gps->self().pos.y < 30)
							walkH = 30;
						else
							walkH = 10;
					}
					else if (NormalizeAngle_180(walkH) > 90) {
						if (gps->self().pos.y < 30)
							walkH = 150;
						else
							walkH = 170;
					}
				}

				currentSubState = ACTION_ADJUST;
			}
		}
	}


	//== ACTION: adjust direction =========================
	else if (currentSubState == ACTION_ADJUST) {
		//-- set walk params ----------------------------
		double relh = NormalizeAngle_180(walkH - (gps->self().h));
		if (ABS(relh) < 45)
			turnCCW = CLIP(relh, ADJUST_TURN);
		else
			turnCCW = CLIP(relh, LARGE_TURN);
		forward = 0;
		left = 0;

		//-- change state -------------------------------
		if (ABS(NormalizeAngle_180(gps->self().h - walkH)) < 5) {
			walkCount = 0;
			currentSubState = ACTION_WALK;
		}
	}


	//== ACTION: walk for 2 sec ===========================
	else if (currentSubState == ACTION_WALK) {
		//-- active localise ----------------------------
		/*
		   if (actLocaliseCount >= 50) {
		   if (actLocaliseCount == 50) {
		   setNewBeacons(LARGE_VAL, 60);
		   activeGpsLocalise(true);
		   } else {
		   activeGpsLocalise(true);
		   }

		   forward = 0;
		   left    = 0;
		   turnCCW = 0;
		   return;
		   }
		   */


		walkCount++;

		//-- set walk params ----------------------------
		turnCCW = 0;
		left = 0;
		forward = 4;
		if (fullSpeed) {
			forward = 6;
		}

		//-- obstruction (vision) -----------------------
		for (int i = vobRedDog; i <= vobBlueDog4; i++) {
			if (vision->vob[i].cf > 0
					&& vision->vob[i].var < get95CF(150)
					&& vision->vob[i].d < VISION_OBS) {
				double deltax = vision->vob[i].d *cos(DEG2RAD(vision->vob[i].head
							+ gps->self().h));
				if (ABS(deltax) < VISION_HGAP
						&& ABS(vision->vob[i].head) < VISION_HEAD) {
					leds(2, 1, 1, 2, 1, 1);
					currentSubState = ACTION_DECIDE;
				}
			}
		}

		//-- obstruction (infrared) ---------------------
		double infraredDist = sensors->sensorVal[ssINFRARED_FAR] / 10000.0;
		if (ABS(RAD2DEG(vision->pan)) < INFRARED_PAN) {
			if (!newobsChallengeIsOnEdge() && infraredDist < INFRARED_OBS) {
				leds(1, 2, 1, 1, 2, 1);
				currentSubState = ACTION_DECIDE;
			}
			else if (newobsChallengeIsOnEdge() && infraredDist < INFRARED_EDGE) {
				leds(1, 2, 1, 1, 2, 1);
				currentSubState = ACTION_DECIDE;
			}
		}

		//-- caught in own goal -------------------------
		if (ONE_WAY && newobsChallengeLockInOwnGoal()) {
			walkH = 90;
			currentSubState = ACTION_ADJUST;
		}

		//-- reach goal ---------------------------------
		if (currentDirection
				== DIRECTION_FORWARD
				&& gps->self().pos.y
				> FIELD_LENGTH
				- 30
				&& ABS(gps->self().pos.x
					- FIELD_WIDTH
					/ 2) < 15) {
			reachGoalCount++;
		}
		else if (currentDirection
				== DIRECTION_BACKWARD
				&& gps->self().pos.y
				< 30
				&& ABS(gps->self().pos.x
					- FIELD_WIDTH
					/ 2)
				< 15) {
			reachGoalCount++;
		}
		else {
			reachGoalCount = 0;
		}

		//-- change state -------------------------------
		if (reachGoalCount >= 5) {
			if (ONE_WAY) {
				currentState = STATE_GOAL;
			}
			else {
				newobsChallengeQueueClear();
				newobsChallengeInitWorldMap();

				reachGoalCount = 0;
				currentState = STATE_U_TURN;
				uTurnH = NormalizeAngle_0_360(walkH + 180);

				if (currentDirection == DIRECTION_FORWARD)
					currentDirection = DIRECTION_BACKWARD;
				else
					currentDirection = DIRECTION_FORWARD;
			}
		}

		//-- change sub state ---------------------------
		if (fullSpeed) {
			if (walkCount > 25) {
				currentSubState = ACTION_DECIDE;
			}
		}
		else {
			if (walkCount > 50) {
				currentSubState = ACTION_DECIDE;
			}
		}
	}


	//=============================================
	// DEBUG
	//=============================================
	if (debugCount % 125 == 0) {
		newobsChallengePrintActionGrid();
	}
}



//--- do U turn ------------------------------------------
void newobstacleChallenge::newobsChallengeUTurn() {
	//-- set walk params ----------------------------
	double relh = NormalizeAngle_180(uTurnH - (gps->self().h));
	turnCCW = CLIP(relh, MAX_TURN);
	forward = 0;
	left = 0;

	//-- change state -------------------------------
	if (ABS(NormalizeAngle_180(gps->self().h - uTurnH)) < 10) {
		currentState = STATE_GOTO_TARGET;
		currentSubState = ACTION_DECIDE;
	}
}



//--- walk into goal -------------------------------------
void newobstacleChallenge::newobsChallengeGoal() {
	double maxSpeed = 6.0;
	double maxTurn = 15.0;

	//--- walk into goal area using gps --------------
	if (gps->self().pos.y < FIELD_LENGTH) {
		double diffx = FIELD_WIDTH / 2 - gps->self().pos.x; 
		double diffy = FIELD_LENGTH - gps->self().pos.y;
		double targetH = RAD2DEG(atan2(diffy, diffx));

		double relx = FIELD_WIDTH / 2 - (gps->self().pos.x);
		double rely = FIELD_LENGTH - (gps->self().pos.y);
		double reld = sqrt(SQUARE(relx) + SQUARE(rely));
		double relTheta = NormalizeAngle_180(RAD2DEG(atan2(rely, relx))
				- (gps->self().h));
		double relh = NormalizeAngle_180(targetH - (gps->self().h));

		forward = CLIP(reld, maxSpeed) * cos(DEG2RAD(relTheta));
		left = CLIP(reld, maxSpeed) * sin(DEG2RAD(relTheta));
		turnCCW = CLIP(relh, maxTurn);
	}
	else {
		double relh = NormalizeAngle_180(90 - (gps->self().h));
		turnCCW = CLIP(relh, maxTurn);
		forward = 4.0;
		left = 0;
	}


	//--- outside centre of goal box ----------------
	if (gps->self().pos.y <FIELD_LENGTH - 30 || ABS(gps->self().pos.x
				- FIELD_WIDTH
				/ 2)> GOAL_WIDTH / 2) {
		currentState = STATE_GOTO_TARGET;
	}


	//--- walk into visual goal if it can see -------
	/* visual goal info not available
	   if (gps->canSee(gps->targetGoal)) {
	//look ahead
	panx     = 0;
	lastPanX = 0;

	//use visual goal
	double relx     = vision->vob[gps->targetGoal].d *
	cos(DEG2RAD(vision->vob[gps->targetGoal].head + gps->self().h));
	double rely     = vision->vob[gps->targetGoal].d *
	sin(DEG2RAD(vision->vob[gps->targetGoal].head + gps->self().h));
	double reld     = sqrt(SQUARE(relx)+SQUARE(rely));
	double relTheta = NormalizeAngle_180(RAD2DEG(atan2(rely,relx)) - (gps->self().h));
	forward  = CLIP (reld, maxSpeed) * cos (DEG2RAD (relTheta));
	left     = CLIP (reld, maxSpeed) * sin (DEG2RAD (relTheta));
	turnCCW  = CLIP (vision->vob[gps->targetGoal].head, maxTurn);
	//--- otherwise use gps -------------------------
	} else {
	double diffx    = FIELD_WIDTH/2 - gps->self().pos.x; 
	double diffy    = FIELD_LENGTH  - gps->self().pos.y;
	double targetH  = RAD2DEG(atan2(diffy, diffx));

	double relx     = FIELD_WIDTH/2 - (gps->self().pos.x);
	double rely     = FIELD_LENGTH - (gps->self().pos.y);
	double reld     = sqrt(SQUARE(relx)+SQUARE(rely));
	double relTheta = NormalizeAngle_180(RAD2DEG(atan2(rely,relx)) - (gps->self().h));
	double relh     = NormalizeAngle_180(targetH - (gps->self().h));
	forward = CLIP (reld, maxSpeed) * cos (DEG2RAD (relTheta));
	left    = CLIP (reld, maxSpeed) * sin (DEG2RAD (relTheta));
	turnCCW = CLIP (relh, maxTurn);
	}
	*/
}



//--- look around to localise ----------------------------
void newobstacleChallenge::newobsChallengeLookAroundHeadParams() {
	headtype = ABS_H;
	tilty = 10;     //20;

	//-- tracking robot --------------------------
	if (infraRedTracking) {
		return;
	}
	if (robotTracking) {
		return;
	}


	//-- normal pan head -------------------------
	if (lastPanX > 90.0) {
		panDirection = -1;
	}

	if (lastPanX < -90.0) {
		panDirection = +1;
	}

	lastPanX += (panDirection * 6.0);
	panx = lastPanX;
}





/////////////////////////////////////////////////////////////
// Update world map
/////////////////////////////////////////////////////////////

//--- init/clear world map ---------------------------------
void newobstacleChallenge::newobsChallengeInitWorldMap() {
	for (int r = 0; r < NUM_ROWS; r++) {
		for (int c = 0; c < NUM_COLS; c++) {
			wMap[r][c] = 0;
		}
	}
}



//--- plot obstacles ---------------------------------------
void newobstacleChallenge::newobsChallengeUpdateWorldMap() {
	//-- do not plot obstacles when localising -----
	if (currentSubState == ACTION_LOCALISE) {
		return;
	}

	//-- remove obstacles from world map -----------
	double selfX = myX;
	double selfY = myY;
	int selfR = CLIP((int) selfY / GRID_SIZE, NUM_ROWS - 1);
	int selfC = CLIP((int) selfX / GRID_SIZE, NUM_COLS - 1);
	double selfH = NormalizeAngle_0_360(gps->self().h + RAD2DEG(vision->pan));

	int sr = selfR - (OBS_MAX_DIST / GRID_SIZE);    if (sr < 0) {
		sr = 0;
	}
	int sc = selfC - (OBS_MAX_DIST / GRID_SIZE);    if (sc < 0) {
		sc = 0;
	}    
	for (int r = sr;
			r < NUM_ROWS && r <= selfR + (OBS_MAX_DIST / GRID_SIZE);
			r++) {
		for (int c = sc;
				c < NUM_COLS && c <= selfC + (OBS_MAX_DIST / GRID_SIZE);
				c++) {
			double px = c *GRID_SIZE + GRID_SIZE / 2;
			double py = r *GRID_SIZE + GRID_SIZE / 2;

			double pDist = DISTANCE(px, py, selfX, selfY);
			if (pDist > OBS_MAX_DIST) {
				continue;
			}

			double diffx = px - selfX; 
			double diffy = py - selfY;
			double ph = RAD2DEG(atan2(diffy, diffx));
			if (ABS(NormalizeAngle_180(selfH - ph)) < CAM_HANGLE) {
				if (wMap[r][c] > OBS_DECAY) {
					wMap[r][c] = wMap[r][c] - OBS_DECAY;
				}
				else {
					wMap[r][c] = 0;
				}
			}
		}
	}


	//-- plot obstacles on world map ---------------
	for (int i = vobRedDog; i <= vobBlueDog4; i++) {
		if (vision->vob[i].cf > 0
				&& vision->vob[i].var < get95CF(150)
				&& vision->vob[i].d <= OBS_MAX_DIST) {
			//estimate obstacle position
			double deltax = vision->vob[i].d *cos(DEG2RAD(vision->vob[i].head
						+ gps->self().h));
			double deltay = vision->vob[i].d *sin(DEG2RAD(vision->vob[i].head
						+ gps->self().h));
			double obsx = myX + deltax;
			double obsy = myY + deltay;
			int obsr = CLIP((int) obsy / GRID_SIZE, NUM_ROWS - 1);
			if (obsr < 0)
				obsr = 0;
			int obsc = CLIP((int) obsx / GRID_SIZE, NUM_COLS - 1);
			if (obsc < 0)
				obsc = 0;

			//relatively more accurate estimations use mid memory
			if (currentSubState == ACTION_SCAN_GAP && vision->vob[i].d < 40) {
				if (wMap[obsr][obsc] < MEMORY_MID)
					wMap[obsr][obsc] = MEMORY_MID;
			}

			//avoid putting obstacles in same cell as itself
			while (obsr == selfR && obsc == selfC) {
				if ((obsr == NUM_ROWS - 1 || obsr == 0)
						&& obsc == NUM_COLS - 1
						|| obsc == 0)
					break;

				if (deltax > 0)
					deltax += 5.0;
				else
					deltax -= 5.0;

				if (deltay > 0)
					deltay += 5.0;
				else
					deltay -= 5.0;

				obsx = myX + deltax;
				obsy = myY + deltay;
				obsr = CLIP((int) obsy / GRID_SIZE, NUM_ROWS - 1);
				if (obsr < 0)
					obsr = 0;
				obsc = CLIP((int) obsx / GRID_SIZE, NUM_COLS - 1);
				if (obsc < 0)
					obsc = 0;
			}

			//plot obstacles
			if (wMap[obsr][obsc] < MEMORY_SHORT)
				wMap[obsr][obsc] = MEMORY_SHORT;

			//add neighbours to queue for update
			for (int y = obsr - 1; y <= obsr + 1; y++) {
				for (int x = obsc - 1; x <= obsc + 1; x++) {
					if (y == obsr && x == obsc)
						continue;

					if (y < 0 || y >= NUM_ROWS || x < 0 || x >= NUM_COLS)
						continue;

					newobsChallengeQueueAdd(y, x);
				}
			}
		}
	}
}



//--- print text world map ---------------------------------
void newobstacleChallenge::newobsChallengePrintWorldMap() {
	//-- border -----------------------------------
	for (int i = 0; i < NUM_COLS + 2; i++) {
		cout << "#";
	}
	cout << endl;

	//-- obstacles --------------------------------
	for (int r = NUM_ROWS - 1; r >= 0; r--) {
		cout << "#";
		for (int c = 0; c < NUM_COLS; c++) {
			if (wMap[r][c] >= MEMORY_SHORT)
				cout << "X";
			else
				cout << " ";
		}
		cout << "#" << endl;
	}

	//-- border -----------------------------------
	for (int i = 0; i < NUM_COLS + 2; i++) {
		cout << "#";
	}
	cout << "\n" << endl;
}





/////////////////////////////////////////////////////////////
// Update Action grid
/////////////////////////////////////////////////////////////

//--- init/clear action grid -------------------------------
void newobstacleChallenge::newobsChallengeInitActionGrid() {
	for (int r = 0; r < NUM_ROWS; r++) {
		for (int c = 0; c < NUM_COLS; c++) {
			for (int a = 0; a < NUM_ACTIONS + 1; a++) {
				qGridForward[r][c][a] = 0;
				qGridBackward[r][c][a] = 0;
			}
		}
	}
}



//--- update action grid -----------------------------------
void newobstacleChallenge::newobsChallengeUpdateActionGrid() {
	//-- loop through queue ---------------------------
	for (int n = 0; n < NUM_UPDATES && !queue.empty(); n++) {
		//-- top of queue ----------------------------
		int id = newobsChallengeQueueRemove();
		int c = id % NUM_COLS;
		int r = id / NUM_COLS;

		//-- old max Q -------------------------------
		int oldMaxI = (int) qGridForward[r][c][NUM_ACTIONS];
		double oldV = qGridForward[r][c][oldMaxI];
		if (currentDirection == DIRECTION_BACKWARD) {
			oldMaxI = (int) qGridBackward[r][c][NUM_ACTIONS];
			oldV = qGridBackward[r][c][oldMaxI];
		}

		//-- loop through actions ------------------------
		for (int a = 0; a < NUM_ACTIONS; a++) {
			//-- calculate Q -----------------------------
			double newQ = 0;

			for (int y = r - 1; y <= r + 1; y++) {
				for (int x = c - 1; x <= c + 1; x++) {
					double prob = newobsChallengeProb(r, c, y, x, a);
					if (prob == 0)
						continue;

					//-- dy dx is where it ends up 
					int dy = y, dx = x;
					if (y < 0 || y >= NUM_ROWS || x < 0 || x >= NUM_COLS) {
						dy = r; dx = c;
					}

					//-- accumulating the sum ----
					if (currentDirection == DIRECTION_FORWARD) {
						int maxindex = (int) qGridForward[dy][dx][NUM_ACTIONS];
						if (x >= GOAL_START && x <= GOAL_END && y == NUM_ROWS) {
							newQ += prob * newobsChallengeReward(r, c, y, x);
						}
						else {
							newQ += prob * (newobsChallengeReward(r, c, dy, dx)
									+ qGridForward[dy][dx][maxindex]);
						}
					}
					else {
						int maxindex = (int) qGridBackward[dy][dx][NUM_ACTIONS];
						if (x >= GOAL_START && x <= GOAL_END && y == -1) {
							newQ += prob * newobsChallengeReward(r, c, y, x);
						}
						else {
							newQ += prob * (newobsChallengeReward(r, c, dy, dx)
									+ qGridBackward[dy][dx][maxindex]);
						}
					}
				}
			}

			//-- update Q and max action -----------------
			if (currentDirection == DIRECTION_FORWARD) {
				qGridForward[r][c][a] = newQ;
				int maxindex = (int) qGridForward[r][c][NUM_ACTIONS];
				if (qGridForward[r][c][a] > qGridForward[r][c][maxindex])
					qGridForward[r][c][NUM_ACTIONS] = a;
			}
			else {
				qGridBackward[r][c][a] = newQ;
				int maxindex = (int) qGridBackward[r][c][NUM_ACTIONS];
				if (qGridBackward[r][c][a] > qGridBackward[r][c][maxindex])
					qGridBackward[r][c][NUM_ACTIONS] = a;
			}
		}

		//-- new max Q -------------------------------
		int newMaxI = (int) qGridForward[r][c][NUM_ACTIONS];
		double newV = qGridForward[r][c][newMaxI];
		if (currentDirection == DIRECTION_BACKWARD) {
			newMaxI = (int) qGridBackward[r][c][NUM_ACTIONS];
			newV = qGridBackward[r][c][newMaxI];
		}

		//-- add neighbours to queue for update ------
		if (ABS(oldV - newV) > 0) {
			for (int y = r - 1; y <= r + 1; y++) {
				for (int x = c - 1; x <= c + 1; x++) {
					if (y == r && x == c)
						continue;

					if (y < 0 || y >= NUM_ROWS || x < 0 || x >= NUM_COLS)
						continue;

					newobsChallengeQueueAdd(y, x);
				}
			}
		}
	}


	//-- restart queue -------------------------------
	if (queue.empty()) {
		newobsChallengeQueueClear();
	}
}



//--- fully update action grid -------------------------------
void newobstacleChallenge::newobsChallengeFullUpdateActionGrid() {
	//-- loop through grid ---------------------------
	for (int r = NUM_ROWS - 1; r >= 0; r--) {
		for (int c = 0; c < NUM_COLS; c++) {
			//-- loop through each action ------------
			for (int a = 0; a < NUM_ACTIONS; a++) {
				double newQ = 0;

				//-- calculate Q ---------------------
				for (int y = r - 1; y <= r + 1; y++) {
					for (int x = c - 1; x <= c + 1; x++) {
						double prob = newobsChallengeProb(r, c, y, x, a);
						if (prob == 0)
							continue;

						//-- dy dx is where it ends up 
						int dy = y, dx = x;
						if (y < 0 || y >= NUM_ROWS || x < 0 || x >= NUM_COLS) {
							dy = r; dx = c;
						}

						//-- accumulating the sum ----
						if (currentDirection == DIRECTION_FORWARD) {
							int maxindex = (int) qGridForward[dy][dx][NUM_ACTIONS];
							if (x >= GOAL_START && x <= GOAL_END && y == NUM_ROWS) {
								newQ += prob * newobsChallengeReward(r, c, y, x);
							}
							else {
								newQ += prob * (newobsChallengeReward(r, c, dy, dx)
										+ qGridForward[dy][dx][maxindex]);
							}
						}
						else {
							int maxindex = (int) qGridBackward[dy][dx][NUM_ACTIONS];
							if (x >= GOAL_START && x <= GOAL_END && y == -1) {
								newQ += prob * newobsChallengeReward(r, c, y, x);
							}
							else {
								newQ += prob * (newobsChallengeReward(r, c, dy, dx)
										+ qGridBackward[dy][dx][maxindex]);
							}
						}
					}
				}

				//-- update Q and max action ---------
				if (currentDirection == DIRECTION_FORWARD) {
					qGridForward[r][c][a] = newQ;
					int maxindex = (int) qGridForward[r][c][NUM_ACTIONS];
					if (qGridForward[r][c][a] > qGridForward[r][c][maxindex])
						qGridForward[r][c][NUM_ACTIONS] = a;
				}
				else {
					qGridBackward[r][c][a] = newQ;
					int maxindex = (int) qGridBackward[r][c][NUM_ACTIONS];
					if (qGridBackward[r][c][a] > qGridBackward[r][c][maxindex])
						qGridBackward[r][c][NUM_ACTIONS] = a;
				}
			}
		}
	}
}



//--- rewards ----------------------------------------------
double newobstacleChallenge::newobsChallengeReward(int fromR,
		int fromC,
		int toR,
		int toC) {
	double reward = 0;

	//-- reward for edge --------------------------
	if (fromR == toR && fromC == toC) {
		reward -= 5;
	}


	//-- reward for distance ----------------------
	if (fromR == toR || fromC == toC) {
		reward -= 1;
	}
	else {
		reward -= sqrt(2.0);
	}


	//-- reward for goal --------------------------
	if (toC >= GOAL_START && toC <= GOAL_END) {
		if (currentDirection == DIRECTION_FORWARD && toR == NUM_ROWS) {
			reward += 10;
		}
		else if (currentDirection == DIRECTION_BACKWARD && toR == -1) {
			reward += 10;
		}
	}


	//-- reward for obstacle ----------------------
	if (!(toR < 0 || toR >= NUM_ROWS || toC < 0 || toC >= NUM_COLS)) {
		if (wMap[toR][toC] >= MEMORY_SHORT) {
			reward -= 50;
		}
	}

	return reward;
}



//--- probability ------------------------------------------
double newobstacleChallenge::newobsChallengeProb(int fromR,
		int fromC,
		int toR,
		int toC,
		int action) {
	//-- probability definitions -----------------
	double prob[8][3][3] = {
		{{PROB2,PROB1,PROB2},    //forward
			{PROB3,PROB0,PROB3},
			{PROB4,PROB5,PROB4}}, {{PROB3,PROB2,PROB1},    //forward right
						      {PROB4,PROB0,PROB2},
						      {PROB5,PROB4,PROB3}}, {{PROB4,PROB3,PROB2},    //right
										    {PROB5,PROB0,PROB1},
										    {PROB4,PROB3,PROB2}}, {{PROB5,PROB4,PROB3},    //backward right
														  {PROB4,PROB0,PROB2},
														  {PROB3,PROB2,PROB1}}, {{PROB4,PROB5,PROB4},    //backward
																		{PROB3,PROB0,PROB3},
																		{PROB2,PROB1,PROB2}}, {{PROB3,PROB4,PROB5},    //backward left
																					      {PROB2,PROB0,PROB4},
																					      {PROB1,PROB2,PROB3}}, {{PROB2,PROB3,PROB4},    //left
																									    {PROB1,PROB0,PROB5},
																									    {PROB2,PROB3,PROB4}}, {{PROB1,PROB2,PROB3},    //forward left
																													  {PROB2,PROB0,PROB4},
																													  {PROB3,PROB4,PROB5}}
	};


	//-- row,col ---------------------------------
	int c = (toC - fromC) + 1;
	int r = 1 - (toR - fromR);


	//-- prob ------------------------------------
	if (r >= 0 && r <= 2 && c >= 0 && c <= 2) {
		return prob[action][r][c];
	}


	//-- default --------------------------------
	return 0;
}



//--- maximum Q --------------------------------------------
double newobstacleChallenge::newobsChallengeMaxQ(int r, int c) {
	double max = 0;
	for (int a = 0; a < NUM_ACTIONS; a++) {
		if (currentDirection == DIRECTION_FORWARD) {
			if (qGridForward[r][c][a] > max) {
				max = qGridForward[r][c][a];
			}
		}
		else {
			if (qGridBackward[r][c][a] > max) {
				max = qGridBackward[r][c][a];
			}
		}
	}
	return max;
}



//--- maximum action ---------------------------------------
int newobstacleChallenge::newobsChallengeMaxQAction(int r, int c) {
	int maxAction = 0;
	for (int a = 0; a < NUM_ACTIONS; a++) {
		if (currentDirection == DIRECTION_FORWARD) {
			if (qGridForward[r][c][a] > qGridForward[r][c][maxAction]) {
				maxAction = a;
			}
		}
		else {
			if (qGridBackward[r][c][a] > qGridBackward[r][c][maxAction]) {
				maxAction = a;
			}
		}
	}
	return maxAction;
}



//--- generate Q values ------------------------------------
void newobstacleChallenge::newobsChallengeGenerateActionGrid() {
	//-- stand -----------------------
	setStandParams();
	forward = 0;
	left = 0;
	turnCCW = 0;

	if (doGenerate) {
		//-- clear world -----------------
		newobsChallengeInitWorldMap();
		newobsChallengeInitActionGrid();

		//-- generate forward grid -------
		currentDirection = DIRECTION_FORWARD;
		int numUpdates = 70;
		for (int i = 0; i < numUpdates; i++) {
			newobsChallengeFullUpdateActionGrid();
		}
		cout << "Forward Q Values" << endl;
		newobsChallengePrintQValues();
		newobsChallengePrintActionGrid();
		cout << "\n\n\n" << endl;

		//-- generate backward grid ------
		currentDirection = DIRECTION_BACKWARD;
		numUpdates = 70;
		for (int i = 0; i < numUpdates; i++) {
			newobsChallengeFullUpdateActionGrid();
		}
		cout << "Backward Q Values" << endl;
		newobsChallengePrintQValues();
		newobsChallengePrintActionGrid();
		cout << "\n\n\n" << endl;

		//-- done printing ---------------
		doGenerate = false;
	}
}



//--- print text action grid -------------------------------
void newobstacleChallenge::newobsChallengePrintActionGrid() {
	//-- border -------------------------------------
	{
		ostringstream actStr;
		ostringstream probStr;

		for (int i = 0; i < NUM_COLS + 2; i++) {
			actStr << "#";
		}
		actStr << "     ";

		for (int i = 0; i < NUM_COLS + 2; i++) {
			probStr << "#";
		}
		cout << actStr.str() << probStr.str() << endl;
	}


	//-- actions and prob ---------------------------
	for (int r = NUM_ROWS - 1; r >= 0; r--) {
		ostringstream actStr;
		ostringstream probStr;
		ostringstream qStr;

		actStr << "#";
		probStr << "#";

		for (int c = 0; c < NUM_COLS; c++) {
			// actions
			if (wMap[r][c] >= MEMORY_SHORT) {
				actStr << "0";
			}
			else {
				int maxDir = (int) qGridForward[r][c][NUM_ACTIONS];
				if (currentDirection == DIRECTION_BACKWARD)
					maxDir = (int) qGridBackward[r][c][NUM_ACTIONS];

				switch (maxDir) {
					case 0: actStr << "^";   break;
					case 1: actStr << "/";   break;
					case 2: actStr << ">";   break;                  
					case 3: actStr << ".";   break;
					case 4: actStr << "v";   break;
					case 5: actStr << ",";   break;
					case 6: actStr << "<";   break;
					case 7: actStr << "\\";  break;
					default: actStr << "?";   break;
				}
			}

			// probability
			if (wMap[r][c] == 0) {
				probStr << " ";
			}
			else if (wMap[r][c] >= MEMORY_SHORT) {
				probStr << "X";
			}
			else {
				int prob = ((int) (wMap[r][c] * 10)) % 10;
				probStr << prob;
			}

			// Q values
			if (currentDirection == DIRECTION_FORWARD) {
				int maxDir = (int) qGridForward[r][c][NUM_ACTIONS];
				int qValue = ABS((int) qGridForward[r][c][maxDir]);
				qStr << qValue << " ";
			}
			else {
				int maxDir = (int) qGridBackward[r][c][NUM_ACTIONS];
				int qValue = ABS((int) qGridBackward[r][c][maxDir]);
				qStr << qValue << " ";
			}
		}
		actStr << "#" << "     ";
		probStr << "#" << "     ";
		cout << actStr.str() << probStr.str() << qStr.str() << endl;
	}


	//-- border -------------------------------------
	{
		ostringstream actStr;
		ostringstream probStr;

		for (int i = 0; i < NUM_COLS + 2; i++) {
			actStr << "#";
		}
		actStr << "     ";

		for (int i = 0; i < NUM_COLS + 2; i++) {
			probStr << "#";
		}
		cout << actStr.str() << probStr.str() << "\n" << endl;
	}
}



//--- print Q values ----------------------------------------
void newobstacleChallenge::newobsChallengePrintQValues() {
	cout << "{";

	for (int r = 0; r < NUM_ROWS; r++) {
		cout << "{";

		for (int c = 0; c < NUM_COLS; c++) {
			cout << "{";

			for (int a = 0; a < NUM_ACTIONS + 1; a++) {
				if (a == NUM_ACTIONS) {
					if (currentDirection == DIRECTION_FORWARD)
						cout << qGridForward[r][c][a];
					else
						cout << qGridBackward[r][c][a];
				}
				else {
					if (currentDirection == DIRECTION_FORWARD)
						cout << qGridForward[r][c][a] << ",";
					else
						cout << qGridBackward[r][c][a] << ",";
				}
			}

			if (c == NUM_COLS - 1)
				cout << "}" << endl;
			else
				cout << "}," << endl;
		}

		if (r == NUM_ROWS - 1)
			cout << "}";
		else
			cout << "},";
	}
	cout << "};" << endl;
}





/////////////////////////////////////////////////////////////
// Heap manipulation
/////////////////////////////////////////////////////////////

//--- clear heap data ----------------------------------------
void newobstacleChallenge::newobsChallengeHeapClear() {
	int heapSize = NUM_ROWS *NUM_COLS;
	for (int i = 0; i < heapSize; i++) {
		hash[i].index = -1;
		hash[i].priority = -1;
		heap.clear();
	}
}



//--- add/modify heap ----------------------------------------
void newobstacleChallenge::newobsChallengeHeapAdd(int row,
		int col,
		double priority) {
	//unique ID representing row,col,action
	int id = row *NUM_COLS + col;


	//modify if already exists
	if (hash[id].index != -1) {
		//bubble down if priority decrease
		/*
		   if (priority < hash[id].priority) {
		   int thisIndex      = hash[id].index;
		   while (thisIndex*2+1 < (int)heap.size()) {

		   int leftIndex  = thisIndex*2+1;
		   int rightIndex = thisIndex*2+2;
		   if (rightIndex >= (int)heap.size())
		   rightIndex = leftIndex;

		   int biggest = thisIndex;
		   if (hash[heap[leftIndex]].priority > hash[heap[biggest]].priority)
		   biggest = leftIndex;
		   if (hash[heap[rightIndex]].priority > hash[heap[biggest]].priority)
		   biggest = rightIndex;

		   if (biggest == thisIndex)
		   break;

		   int temp                  = heap[thisIndex];
		   heap[thisIndex]           = heap[biggest];
		   hash[heap[biggest]].index = thisIndex;
		   heap[biggest]             = temp;
		   hash[temp].index          = biggest;

		   thisIndex = biggest;
		   }
		   }
		//bubble up if priority increase
		else */
		if (priority > hash[id].priority) {
			hash[id].priority = priority;

			int n = hash[id].index;
			int lastIndex = n;
			int lastElem = id;

			for (int i = (n - 1) / 2; i >= 0; i = (i - 1) / 2) {
				int thisElem = heap[i];
				if (hash[thisElem].priority < hash[lastElem].priority) {
					heap[lastIndex] = thisElem;
					hash[thisElem].index = lastIndex;

					heap[i] = lastElem;
					hash[lastElem].index = i;                

					lastIndex = i;
				}
				else {
					break;
				}
			}
		}
	}


	//add to heap if not exists
	else {
		int n = (int) heap.size();
		heap.insert(heap.end(), id);
		hash[id].index = n;
		hash[id].priority = priority;

		int lastIndex = n;
		int lastElem = id;

		for (int i = (int) floor((n - 1) / 2.0);
				i >= 0;
				i = (int) floor((i - 1) / 2.0)) {
			int thisElem = heap[i];

			if (hash[thisElem].priority < hash[lastElem].priority) {
				heap[lastIndex] = thisElem;
				hash[thisElem].index = lastIndex;

				heap[i] = lastElem;
				hash[lastElem].index = i;                

				lastIndex = i;
			}
			else {
				break;
			}
		}
	}
}



//--- remove from heap ---------------------------------------
int newobstacleChallenge::newobsChallengeHeapRemove() {
	//get top node from heap
	int result = -1;
	if (heap.empty()) {
		return result;
	}
	else {
		result = heap[0];
	}

	//move last element to top
	hash[heap[((int) heap.size()) - 1]].index = 0;
	hash[heap[0]].index = -1;

	heap[0] = heap.back();
	heap.pop_back();

	//top element bubble down the heap
	int thisIndex = 0;
	while (thisIndex * 2 + 1 < (int) heap.size()) {
		int leftIndex = thisIndex*2 + 1;
		int rightIndex = thisIndex*2 + 2;
		if (rightIndex >= (int) heap.size())
			rightIndex = leftIndex;

		int biggest = thisIndex;
		if (hash[heap[leftIndex]].priority > hash[heap[biggest]].priority)
			biggest = leftIndex;
		if (hash[heap[rightIndex]].priority > hash[heap[biggest]].priority)
			biggest = rightIndex;

		if (biggest == thisIndex)
			break;

		int temp = heap[thisIndex];
		heap[thisIndex] = heap[biggest];
		hash[heap[biggest]].index = thisIndex;
		heap[biggest] = temp;
		hash[temp].index = biggest;

		thisIndex = biggest;
	}

	//return removed element
	return result;
}



//--- print heap for debugging -------------------------------
void newobstacleChallenge::newobsChallengeHeapPrint() {
	cout << "Size of Heap: " << heap.size() << endl;
	for (int i = 0; i < (int) heap.size() && i < 10; i++) {
		cout << hash[heap[i]].priority << " ";
	}
	cout << endl;
}





/////////////////////////////////////////////////////////////
// Queue manipulation
/////////////////////////////////////////////////////////////

//--- clear queue data ----------------------------------------
void newobstacleChallenge::newobsChallengeQueueClear() {
	int queueSize = NUM_ROWS *NUM_COLS;
	for (int i = 0; i < queueSize; i++) {
		queueHash[i] = false;
	}
	queue.clear();
}



//--- add to queue --------------------------------------------
void newobstacleChallenge::newobsChallengeQueueAdd(int row, int col) {
	int id = row *NUM_COLS + col;

	if (queueHash[id]) {
		return;
	}

	queue.push_back(id);
	queueHash[id] = true;
}



//--- remove from queue ---------------------------------------
int newobstacleChallenge::newobsChallengeQueueRemove() {
	int id = queue.front();
	queue.pop_front();
	return id;
}





/////////////////////////////////////////////////////////////
// Robot tracking
/////////////////////////////////////////////////////////////

//--- track robot given heading -------------------------
#define FOV 10
bool newobstacleChallenge::newobsChallengeRobotTracking(double head,
		double range) {
	double closestDogDist = FIELD_LENGTH;
	int closestDog = -1;
	for (int i = vobRedDog; i <= vobBlueDog4; i++) {
		if (vision->vob[i].cf > 0 && vision->vob[i].var < get95CF(150)) {
			if (vision->vob[i].d < closestDogDist) {
				if (head == -1 || ABS(vision->vob[i].head - head) <= range / 2) {
					closestDogDist = vision->vob[i].d;
					closestDog = i;
				}
			}
		}
	}

	if (closestDog != -1) {
		tilty = vision->vob[closestDog].elev;
		panx = vision->vob[closestDog].head;

		if (abs(panx - hPan) > FOV) {
			double factor = 1.0 + ABS(panx - hPan) / 60;
			panx = hPan + (panx - hPan) * factor;
		}

		double x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, x5, y5, z5, x6, z6;

		x1 = vision->vob[closestDog].d * tan(radians(vision->vob[closestDog].imgHead));
		y1 = vision->vob[closestDog].d * tan(radians(vision->vob[closestDog].imgElev));
		z1 = vision->vob[closestDog].d;

		x2 = x1;
		y2 = y1 + NECK_LENGTH;
		z2 = z1 + FACE_LENGTH;

		x3 = x2 * cos(radians(-hPan)) - z2 * sin(radians(-hPan));
		y3 = y2;
		z3 = x2 * sin(radians(-hPan)) + z2 * cos(radians(-hPan));

		x4 = x3;
		y4 = z3 * sin(radians(hTilt)) + y3 * cos(radians(hTilt));
		z4 = z3 * cos(radians(hTilt)) - y3 * sin(radians(hTilt));

		double turn = radians(turnCCW / 8);
		x5 = x4 * cos(turn) - z4 * sin(turn);
		y5 = y4;
		z5 = x4 * sin(turn) + z4 * cos(turn);

		if (z5 < NECK_LENGTH)
			z5 = NECK_LENGTH;

		headtype = ABS_H;
		double dist = sqrt(z5 *z5 + y5 *y5);
		tilty = degrees(atan(y5 / z5) - asin(NECK_LENGTH / dist));

		lastPanX = panx;
		lastTiltY = tilty;

		return true;
	}
	else {
		return false;
	}
}



//--- measure robot distance given heading --------------
double newobstacleChallenge::newobsChallengeInfraRedRobotDist(double head,
		double range) {
	// scan for robot within range
	if (!infraRedTrackingFound) {
		infraRedTrackingCount++;

		// pan head
		if (lastPanX > head + (range / 2)) {
			panDirection = -1;
		}

		if (lastPanX < head - (range / 2)) {
			panDirection = +1;
		}

		if (ABS(lastPanX - head) > (range / 2))
			lastPanX += (panDirection * 2.0);
		else
			lastPanX += (panDirection * 2.0);
		panx = lastPanX;

		// track robot
		if (newobsChallengeRobotTracking(head, range)) {
			infraRedTrackingTilt = tilty;
			infraRedTrackingPan = panx;
			infraRedTrackingFound = true;
			infraRedTrackingCount = 0;
		} 
		return -1;
	}
	else {
		tilty = infraRedTrackingTilt;
		panx = infraRedTrackingPan;
		infraRedTrackingCount++;

		if (infraRedTrackingCount > 5)
			return (sensors->sensorVal[ssINFRARED_FAR] / 10000.0);
		else
			return -1;
	}
}



//--- measure robot distance given heading --------------
double newobstacleChallenge::newobsChallengeVisionRobotDist(double head,
		double range) {
	// scan for robot within range
	if (!robotTrackingFound) {
		robotTrackingCount++;

		// pan head
		if (lastPanX > head + (range / 2)) {
			panDirection = -1;
		}

		if (lastPanX < head - (range / 2)) {
			panDirection = +1;
		}

		if (ABS(lastPanX - head) > (range / 2))
			lastPanX += (panDirection * 2.0);
		else
			lastPanX += (panDirection * 2.0);
		panx = lastPanX;

		// track robot
		if (newobsChallengeRobotTracking(head, range)) {
			robotTrackingFound = true;
			robotTrackingCount = 0;
		} 
		return -1;
	}
	else {
		newobsChallengeRobotTracking(-1, range);
		robotTrackingCount++;

		if (robotTrackingCount > 10) {
			double closestDogDist = FIELD_LENGTH;
			for (int i = vobRedDog; i <= vobBlueDog4; i++) {
				if (vision->vob[i].cf > 0 && vision->vob[i].var < get95CF(150)) {
					if (vision->vob[i].d < closestDogDist) {
						closestDogDist = vision->vob[i].d;
					}
				}
			}
			return closestDogDist;
		}
		else {
			return -1;
		}
	}
}





/////////////////////////////////////////////////////////////
// Others
/////////////////////////////////////////////////////////////

//--- update debug count -------------------------------------
void newobstacleChallenge::newobsChallengeUpdateDebugCount() {
	debugCount = (debugCount + 1) % 250;
}



//--- update localise count ----------------------------------
void newobstacleChallenge::newobsChallengeUpdateActLocaliseCount() {
	actLocaliseCount = (actLocaliseCount + 1) % 60;
}



//--- check if near edge -------------------------------------
bool newobstacleChallenge::newobsChallengeIsOnEdge() {
	if (gps->self().pos.x <30
			|| gps->self().pos.x> FIELD_WIDTH - 30
			|| gps->self().pos.y <30
			|| gps->self().pos.y> FIELD_LENGTH - 30) {
		return true;
	}
	else {
		return false;
	}
}



//--- caught in own goal -------------------------------------
bool newobstacleChallenge::newobsChallengeLockInOwnGoal() {
	if (ABS(gps->self().pos.x - FIELD_WIDTH / 2) <= GOAL_WIDTH / 2) {
		if (gps->self().pos.y < 5
				&& ABS(NormalizeAngle_0_360(gps->self().h) - 270) <= 80)
			return true;
		if (gps->self().pos.y < 0
				&& ABS(NormalizeAngle_0_360(gps->self().h) - 270) <= 90)
			return true;
	}
	return false;
}



//--- in front of own goal -----------------------------------
bool newobstacleChallenge::newobsChallengeNearOwnGoal() {
	if (gps->self().pos.y < GOALBOX_DEPTH && ABS(gps->self().pos.x
				- FIELD_WIDTH
				/ 2) <= GOALBOX_WIDTH / 2) {
		return true;
	}
	return false;
}



//--- update self position -----------------------------------
void newobstacleChallenge::newobsChallengeUpdatePosition() {
	//myX = gps->self().pos.x;
	//myY = gps->self().pos.y;

	if (myX == -1 || myY == -1) {
		myX = gps->self().pos.x;
		myY = gps->self().pos.y;
	}
	else {
		double alpha = 0.98;

		myX += cos(DEG2RAD(gps->self().h)) * gps->oForward;
		myY += sin(DEG2RAD(gps->self().h)) * gps->oForward;

		myX = alpha * myX + (1 - alpha) * gps->self().pos.x;
		myY = alpha * myY + (1 - alpha) * gps->self().pos.y;
	}
}



//--- determine speed ----------------------------------------
void newobstacleChallenge::newobsChallengeDetermineSpeed(int fromR,
		int fromC,
		double walkHeading) {
	//-- probability definitions -----------------
	bool obstruct[9][3][3] = {
		{{true,true,true},    //forward
			{true,true,true},
			{false,false,false}}, {{true,true,true},     //forward right
						      {false,true,true},
						      {false,false,true}}, {{false,true,true},    //right
										   {false,true,true},
										   {false,true,true}}, {{false,false,true},   //backward right
													       {false,true,true},
													       {true,true,true}}, {{false,false,false},  //backward
																	  {true,true,true},
																	  {true,true,true}}, {{true,false,false},   //backward left
																				     {true,true,false},
																				     {true,true,true}}, {{true,true,false},    //left
																								{true,true,false},
																								{true,true,false}}, {{true,true,true},     //forward left
																											    {true,true,false},
																											    {true,false,false}}, {{true,true,true},     //default
																															 {true,true,true},
																															 {true,true,true}}
	};

	//-- closest action -------------------------- 
	double dir[8] = {
		90.0, 45.0, 0, 315.0, 270.0, 225.0, 180.0, 135.0
	};
	int action = 8;
	for (int i = 0; i < 8; i++) {
		if (ABS(NormalizeAngle_180(walkHeading - dir[i])) < 23) {
			action = i;
			break;
		}
	}                           

	//-- check near by obstacles -----------------
	fullSpeed = true;
	stopLook = false;
	for (int r = fromR - 1; r <= fromR + 1; r++) {
		for (int c = fromC - 1; c <= fromC + 1; c++) {
			if (r < 0 || r >= NUM_ROWS || c < 0 || c >= NUM_COLS)
				continue;

			int col = (c - fromC) + 1;
			int row = 1 - (r - fromR);

			if (!obstruct[action][row][col])
				continue;

			//slow down speed
			if (wMap[r][c] > PROB_SPEED) {
				fullSpeed = false;
			}

			//stop and look
			if (wMap[r][c] > PROB_STOP) {
				stopLook = true;
			}
		}
	}
}

